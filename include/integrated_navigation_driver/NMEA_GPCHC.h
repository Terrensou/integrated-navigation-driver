// Generated by gencpp from file integrated_navigation_driver/NMEA_GPCHC.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_DRIVER_MESSAGE_NMEA_GPCHC_H
#define INTEGRATED_NAVIGATION_DRIVER_MESSAGE_NMEA_GPCHC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace integrated_navigation_driver
{
template <class ContainerAllocator>
struct NMEA_GPCHC_
{
  typedef NMEA_GPCHC_<ContainerAllocator> Type;

  NMEA_GPCHC_()
    : header()
    , gnss_week(0)
    , gnss_time(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , gyroscope_x(0.0)
    , gyroscope_y(0.0)
    , gyroscope_z(0.0)
    , acceleration_x(0.0)
    , acceleration_y(0.0)
    , acceleration_z(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocity_e(0.0)
    , velocity_n(0.0)
    , velocity_u(0.0)
    , velocity(0.0)
    , nsv1(0)
    , nsv2(0)
    , status()
    , age(0)
    , warming(0)  {
      status.assign(0);
  }
  NMEA_GPCHC_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gnss_week(0)
    , gnss_time(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , gyroscope_x(0.0)
    , gyroscope_y(0.0)
    , gyroscope_z(0.0)
    , acceleration_x(0.0)
    , acceleration_y(0.0)
    , acceleration_z(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocity_e(0.0)
    , velocity_n(0.0)
    , velocity_u(0.0)
    , velocity(0.0)
    , nsv1(0)
    , nsv2(0)
    , status()
    , age(0)
    , warming(0)  {
  (void)_alloc;
      status.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _gnss_week_type;
  _gnss_week_type gnss_week;

   typedef double _gnss_time_type;
  _gnss_time_type gnss_time;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _gyroscope_x_type;
  _gyroscope_x_type gyroscope_x;

   typedef double _gyroscope_y_type;
  _gyroscope_y_type gyroscope_y;

   typedef double _gyroscope_z_type;
  _gyroscope_z_type gyroscope_z;

   typedef double _acceleration_x_type;
  _acceleration_x_type acceleration_x;

   typedef double _acceleration_y_type;
  _acceleration_y_type acceleration_y;

   typedef double _acceleration_z_type;
  _acceleration_z_type acceleration_z;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _velocity_e_type;
  _velocity_e_type velocity_e;

   typedef double _velocity_n_type;
  _velocity_n_type velocity_n;

   typedef double _velocity_u_type;
  _velocity_u_type velocity_u;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef uint16_t _nsv1_type;
  _nsv1_type nsv1;

   typedef uint16_t _nsv2_type;
  _nsv2_type nsv2;

   typedef boost::array<uint8_t, 2>  _status_type;
  _status_type status;

   typedef uint8_t _age_type;
  _age_type age;

   typedef uint8_t _warming_type;
  _warming_type warming;





  typedef boost::shared_ptr< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> const> ConstPtr;

}; // struct NMEA_GPCHC_

typedef ::integrated_navigation_driver::NMEA_GPCHC_<std::allocator<void> > NMEA_GPCHC;

typedef boost::shared_ptr< ::integrated_navigation_driver::NMEA_GPCHC > NMEA_GPCHCPtr;
typedef boost::shared_ptr< ::integrated_navigation_driver::NMEA_GPCHC const> NMEA_GPCHCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator1> & lhs, const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gnss_week == rhs.gnss_week &&
    lhs.gnss_time == rhs.gnss_time &&
    lhs.heading == rhs.heading &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.gyroscope_x == rhs.gyroscope_x &&
    lhs.gyroscope_y == rhs.gyroscope_y &&
    lhs.gyroscope_z == rhs.gyroscope_z &&
    lhs.acceleration_x == rhs.acceleration_x &&
    lhs.acceleration_y == rhs.acceleration_y &&
    lhs.acceleration_z == rhs.acceleration_z &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.velocity_e == rhs.velocity_e &&
    lhs.velocity_n == rhs.velocity_n &&
    lhs.velocity_u == rhs.velocity_u &&
    lhs.velocity == rhs.velocity &&
    lhs.nsv1 == rhs.nsv1 &&
    lhs.nsv2 == rhs.nsv2 &&
    lhs.status == rhs.status &&
    lhs.age == rhs.age &&
    lhs.warming == rhs.warming;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator1> & lhs, const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "217290c45b44eecb57899244d59da554";
  }

  static const char* value(const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x217290c45b44eecbULL;
  static const uint64_t static_value2 = 0x57899244d59da554ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_driver/NMEA_GPCHC";
  }

  static const char* value(const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint16 gnss_week\n"
"float64 gnss_time\n"
"\n"
"float64 heading\n"
"float64 pitch\n"
"float64 roll\n"
"\n"
"float64 gyroscope_x\n"
"float64 gyroscope_y\n"
"float64 gyroscope_z\n"
"\n"
"float64 acceleration_x\n"
"float64 acceleration_y\n"
"float64 acceleration_z\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"\n"
"float64 velocity_e\n"
"float64 velocity_n\n"
"float64 velocity_u\n"
"\n"
"float64 velocity\n"
"\n"
"uint16 nsv1\n"
"uint16 nsv2\n"
"\n"
"char[2] status\n"
"\n"
"uint8 age\n"
"\n"
"uint8 warming\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gnss_week);
      stream.next(m.gnss_time);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.gyroscope_x);
      stream.next(m.gyroscope_y);
      stream.next(m.gyroscope_z);
      stream.next(m.acceleration_x);
      stream.next(m.acceleration_y);
      stream.next(m.acceleration_z);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.velocity_e);
      stream.next(m.velocity_n);
      stream.next(m.velocity_u);
      stream.next(m.velocity);
      stream.next(m.nsv1);
      stream.next(m.nsv2);
      stream.next(m.status);
      stream.next(m.age);
      stream.next(m.warming);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NMEA_GPCHC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_driver::NMEA_GPCHC_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gnss_week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gnss_week);
    s << indent << "gnss_time: ";
    Printer<double>::stream(s, indent + "  ", v.gnss_time);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "gyroscope_x: ";
    Printer<double>::stream(s, indent + "  ", v.gyroscope_x);
    s << indent << "gyroscope_y: ";
    Printer<double>::stream(s, indent + "  ", v.gyroscope_y);
    s << indent << "gyroscope_z: ";
    Printer<double>::stream(s, indent + "  ", v.gyroscope_z);
    s << indent << "acceleration_x: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_x);
    s << indent << "acceleration_y: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_y);
    s << indent << "acceleration_z: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_z);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "velocity_e: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_e);
    s << indent << "velocity_n: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_n);
    s << indent << "velocity_u: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_u);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "nsv1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.nsv1);
    s << indent << "nsv2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.nsv2);
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.status[i]);
    }
    s << indent << "age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.age);
    s << indent << "warming: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.warming);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_DRIVER_MESSAGE_NMEA_GPCHC_H
