// Generated by gencpp from file integrated_navigation_driver/Spanlog_ASCIIHeader.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_DRIVER_MESSAGE_SPANLOG_ASCIIHEADER_H
#define INTEGRATED_NAVIGATION_DRIVER_MESSAGE_SPANLOG_ASCIIHEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace integrated_navigation_driver
{
template <class ContainerAllocator>
struct Spanlog_ASCIIHeader_
{
  typedef Spanlog_ASCIIHeader_<ContainerAllocator> Type;

  Spanlog_ASCIIHeader_()
    : port()
    , sequence(0)
    , idle_time(0.0)
    , time_status(0)
    , week(0)
    , seconds(0.0)
    , receiver_status(0)
    , reserved(0)
    , receiver_sw_version(0)  {
    }
  Spanlog_ASCIIHeader_(const ContainerAllocator& _alloc)
    : port(_alloc)
    , sequence(0)
    , idle_time(0.0)
    , time_status(0)
    , week(0)
    , seconds(0.0)
    , receiver_status(0)
    , reserved(0)
    , receiver_sw_version(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _port_type;
  _port_type port;

   typedef int32_t _sequence_type;
  _sequence_type sequence;

   typedef float _idle_time_type;
  _idle_time_type idle_time;

   typedef uint8_t _time_status_type;
  _time_status_type time_status;

   typedef uint32_t _week_type;
  _week_type week;

   typedef double _seconds_type;
  _seconds_type seconds;

   typedef uint32_t _receiver_status_type;
  _receiver_status_type receiver_status;

   typedef uint32_t _reserved_type;
  _reserved_type reserved;

   typedef uint32_t _receiver_sw_version_type;
  _receiver_sw_version_type receiver_sw_version;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(APPROXIMATE)
  #undef APPROXIMATE
#endif
#if defined(_WIN32) && defined(COARSEADJUSTING)
  #undef COARSEADJUSTING
#endif
#if defined(_WIN32) && defined(COARSE)
  #undef COARSE
#endif
#if defined(_WIN32) && defined(COARSESTEERING)
  #undef COARSESTEERING
#endif
#if defined(_WIN32) && defined(FREEWHEELING)
  #undef FREEWHEELING
#endif
#if defined(_WIN32) && defined(FINEADJUSTING)
  #undef FINEADJUSTING
#endif
#if defined(_WIN32) && defined(FINE)
  #undef FINE
#endif
#if defined(_WIN32) && defined(FINEBACKUPSTEERING)
  #undef FINEBACKUPSTEERING
#endif
#if defined(_WIN32) && defined(FINESTEERING)
  #undef FINESTEERING
#endif
#if defined(_WIN32) && defined(SATTIME)
  #undef SATTIME
#endif

  enum {
    UNKNOWN = 20u,
    APPROXIMATE = 20u,
    COARSEADJUSTING = 20u,
    COARSE = 20u,
    COARSESTEERING = 20u,
    FREEWHEELING = 20u,
    FINEADJUSTING = 20u,
    FINE = 20u,
    FINEBACKUPSTEERING = 20u,
    FINESTEERING = 20u,
    SATTIME = 20u,
  };


  typedef boost::shared_ptr< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> const> ConstPtr;

}; // struct Spanlog_ASCIIHeader_

typedef ::integrated_navigation_driver::Spanlog_ASCIIHeader_<std::allocator<void> > Spanlog_ASCIIHeader;

typedef boost::shared_ptr< ::integrated_navigation_driver::Spanlog_ASCIIHeader > Spanlog_ASCIIHeaderPtr;
typedef boost::shared_ptr< ::integrated_navigation_driver::Spanlog_ASCIIHeader const> Spanlog_ASCIIHeaderConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator1> & lhs, const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator2> & rhs)
{
  return lhs.port == rhs.port &&
    lhs.sequence == rhs.sequence &&
    lhs.idle_time == rhs.idle_time &&
    lhs.time_status == rhs.time_status &&
    lhs.week == rhs.week &&
    lhs.seconds == rhs.seconds &&
    lhs.receiver_status == rhs.receiver_status &&
    lhs.reserved == rhs.reserved &&
    lhs.receiver_sw_version == rhs.receiver_sw_version;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator1> & lhs, const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecf6658dc063dfdde9a1a24c9dbb5cfd";
  }

  static const char* value(const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecf6658dc063dfddULL;
  static const uint64_t static_value2 = 0xe9a1a24c9dbb5cfdULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_driver/Spanlog_ASCIIHeader";
  }

  static const char* value(const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#INSPVAX header\n"
"\n"
"string port\n"
"int32 sequence\n"
"\n"
"float32 idle_time\n"
"\n"
"uint8 UNKNOWN = 20\n"
"uint8 APPROXIMATE = 20\n"
"uint8 COARSEADJUSTING = 20\n"
"uint8 COARSE = 20\n"
"uint8 COARSESTEERING = 20\n"
"uint8 FREEWHEELING = 20\n"
"uint8 FINEADJUSTING = 20\n"
"uint8 FINE = 20\n"
"uint8 FINEBACKUPSTEERING = 20\n"
"uint8 FINESTEERING = 20\n"
"uint8 SATTIME = 20\n"
"uint8 time_status\n"
"\n"
"uint32 week\n"
"float64 seconds\n"
"\n"
"uint32 receiver_status\n"
"uint32 reserved\n"
"uint32 receiver_sw_version\n"
;
  }

  static const char* value(const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.port);
      stream.next(m.sequence);
      stream.next(m.idle_time);
      stream.next(m.time_status);
      stream.next(m.week);
      stream.next(m.seconds);
      stream.next(m.receiver_status);
      stream.next(m.reserved);
      stream.next(m.receiver_sw_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Spanlog_ASCIIHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_driver::Spanlog_ASCIIHeader_<ContainerAllocator>& v)
  {
    s << indent << "port: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.port);
    s << indent << "sequence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sequence);
    s << indent << "idle_time: ";
    Printer<float>::stream(s, indent + "  ", v.idle_time);
    s << indent << "time_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time_status);
    s << indent << "week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.week);
    s << indent << "seconds: ";
    Printer<double>::stream(s, indent + "  ", v.seconds);
    s << indent << "receiver_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.receiver_status);
    s << indent << "reserved: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved);
    s << indent << "receiver_sw_version: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.receiver_sw_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_DRIVER_MESSAGE_SPANLOG_ASCIIHEADER_H
