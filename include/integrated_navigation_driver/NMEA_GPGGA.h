// Generated by gencpp from file integrated_navigation_driver/NMEA_GPGGA.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_DRIVER_MESSAGE_NMEA_GPGGA_H
#define INTEGRATED_NAVIGATION_DRIVER_MESSAGE_NMEA_GPGGA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace integrated_navigation_driver
{
template <class ContainerAllocator>
struct NMEA_GPGGA_
{
  typedef NMEA_GPGGA_<ContainerAllocator> Type;

  NMEA_GPGGA_()
    : header()
    , utc_time()
    , latitude()
    , latitude_direction()
    , longitude()
    , longitude_direction()
    , gnss_quality(0)
    , number_of_using_satellites(0)
    , horizontal_dilution_of_precision(0.0)
    , altitude(0.0)
    , altitude_units()
    , undulation(0.0)
    , undulation_units()
    , differential_age(0)
    , differential_station_id()  {
    }
  NMEA_GPGGA_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utc_time(_alloc)
    , latitude(_alloc)
    , latitude_direction(_alloc)
    , longitude(_alloc)
    , longitude_direction(_alloc)
    , gnss_quality(0)
    , number_of_using_satellites(0)
    , horizontal_dilution_of_precision(0.0)
    , altitude(0.0)
    , altitude_units(_alloc)
    , undulation(0.0)
    , undulation_units(_alloc)
    , differential_age(0)
    , differential_station_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _utc_time_type;
  _utc_time_type utc_time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _latitude_type;
  _latitude_type latitude;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _latitude_direction_type;
  _latitude_direction_type latitude_direction;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _longitude_type;
  _longitude_type longitude;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _longitude_direction_type;
  _longitude_direction_type longitude_direction;

   typedef uint8_t _gnss_quality_type;
  _gnss_quality_type gnss_quality;

   typedef uint8_t _number_of_using_satellites_type;
  _number_of_using_satellites_type number_of_using_satellites;

   typedef double _horizontal_dilution_of_precision_type;
  _horizontal_dilution_of_precision_type horizontal_dilution_of_precision;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _altitude_units_type;
  _altitude_units_type altitude_units;

   typedef double _undulation_type;
  _undulation_type undulation;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _undulation_units_type;
  _undulation_units_type undulation_units;

   typedef uint8_t _differential_age_type;
  _differential_age_type differential_age;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _differential_station_id_type;
  _differential_station_id_type differential_station_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LATITUDE_NORTH)
  #undef LATITUDE_NORTH
#endif
#if defined(_WIN32) && defined(LATITUDE_SOUTH)
  #undef LATITUDE_SOUTH
#endif
#if defined(_WIN32) && defined(LONGITUDE_EAST)
  #undef LONGITUDE_EAST
#endif
#if defined(_WIN32) && defined(LONGITUDE_WEST)
  #undef LONGITUDE_WEST
#endif
#if defined(_WIN32) && defined(GNSS_FIX_INVALID)
  #undef GNSS_FIX_INVALID
#endif
#if defined(_WIN32) && defined(GNSS_SINGLE_POINT)
  #undef GNSS_SINGLE_POINT
#endif
#if defined(_WIN32) && defined(GNSS_PSEUDORANGE_DIFFERENTIAL)
  #undef GNSS_PSEUDORANGE_DIFFERENTIAL
#endif
#if defined(_WIN32) && defined(GNSS_FIX_SOLUTION)
  #undef GNSS_FIX_SOLUTION
#endif
#if defined(_WIN32) && defined(GNSS_FLOATING_SOLUTION)
  #undef GNSS_FLOATING_SOLUTION
#endif
#if defined(_WIN32) && defined(GNSS_RECKONING_MODE)
  #undef GNSS_RECKONING_MODE
#endif
#if defined(_WIN32) && defined(GNSS_MANUAL_FIXED)
  #undef GNSS_MANUAL_FIXED
#endif
#if defined(_WIN32) && defined(GNSS_SIMULATOR_MODE)
  #undef GNSS_SIMULATOR_MODE
#endif
#if defined(_WIN32) && defined(GNSS_WAAS)
  #undef GNSS_WAAS
#endif
#if defined(_WIN32) && defined(UNITS_KILOMETER)
  #undef UNITS_KILOMETER
#endif
#if defined(_WIN32) && defined(UNITS_METER)
  #undef UNITS_METER
#endif
#if defined(_WIN32) && defined(UNITS_DECIMETER)
  #undef UNITS_DECIMETER
#endif
#if defined(_WIN32) && defined(UNITS_CENTIMETER)
  #undef UNITS_CENTIMETER
#endif

  enum {
    GNSS_FIX_INVALID = 0u,
    GNSS_SINGLE_POINT = 1u,
    GNSS_PSEUDORANGE_DIFFERENTIAL = 2u,
    GNSS_FIX_SOLUTION = 4u,
    GNSS_FLOATING_SOLUTION = 5u,
    GNSS_RECKONING_MODE = 6u,
    GNSS_MANUAL_FIXED = 7u,
    GNSS_SIMULATOR_MODE = 8u,
    GNSS_WAAS = 9u,
  };

  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LATITUDE_NORTH;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LATITUDE_SOUTH;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LONGITUDE_EAST;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LONGITUDE_WEST;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNITS_KILOMETER;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNITS_METER;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNITS_DECIMETER;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNITS_CENTIMETER;

  typedef boost::shared_ptr< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> const> ConstPtr;

}; // struct NMEA_GPGGA_

typedef ::integrated_navigation_driver::NMEA_GPGGA_<std::allocator<void> > NMEA_GPGGA;

typedef boost::shared_ptr< ::integrated_navigation_driver::NMEA_GPGGA > NMEA_GPGGAPtr;
typedef boost::shared_ptr< ::integrated_navigation_driver::NMEA_GPGGA const> NMEA_GPGGAConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      NMEA_GPGGA_<ContainerAllocator>::LATITUDE_NORTH =
        
          "N"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      NMEA_GPGGA_<ContainerAllocator>::LATITUDE_SOUTH =
        
          "S"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      NMEA_GPGGA_<ContainerAllocator>::LONGITUDE_EAST =
        
          "E"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      NMEA_GPGGA_<ContainerAllocator>::LONGITUDE_WEST =
        
          "W"
        
        ;
   

   

   

   

   

   

   

   

   

   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      NMEA_GPGGA_<ContainerAllocator>::UNITS_KILOMETER =
        
          "KM"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      NMEA_GPGGA_<ContainerAllocator>::UNITS_METER =
        
          "M"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      NMEA_GPGGA_<ContainerAllocator>::UNITS_DECIMETER =
        
          "DM"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      NMEA_GPGGA_<ContainerAllocator>::UNITS_CENTIMETER =
        
          "CM"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator1> & lhs, const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.utc_time == rhs.utc_time &&
    lhs.latitude == rhs.latitude &&
    lhs.latitude_direction == rhs.latitude_direction &&
    lhs.longitude == rhs.longitude &&
    lhs.longitude_direction == rhs.longitude_direction &&
    lhs.gnss_quality == rhs.gnss_quality &&
    lhs.number_of_using_satellites == rhs.number_of_using_satellites &&
    lhs.horizontal_dilution_of_precision == rhs.horizontal_dilution_of_precision &&
    lhs.altitude == rhs.altitude &&
    lhs.altitude_units == rhs.altitude_units &&
    lhs.undulation == rhs.undulation &&
    lhs.undulation_units == rhs.undulation_units &&
    lhs.differential_age == rhs.differential_age &&
    lhs.differential_station_id == rhs.differential_station_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator1> & lhs, const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c46119af93e8816c7f5efaafeb91da0";
  }

  static const char* value(const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c46119af93e8816ULL;
  static const uint64_t static_value2 = 0xc7f5efaafeb91da0ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_driver/NMEA_GPGGA";
  }

  static const char* value(const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n"
"\n"
"# UTC time\n"
"string utc_time\n"
"\n"
"string latitude\n"
"string LATITUDE_NORTH = N\n"
"string LATITUDE_SOUTH = S\n"
"string latitude_direction\n"
"\n"
"string longitude\n"
"string LONGITUDE_EAST = E\n"
"string LONGITUDE_WEST = W\n"
"string longitude_direction\n"
"\n"
"uint8 GNSS_FIX_INVALID = 0\n"
"uint8 GNSS_SINGLE_POINT = 1\n"
"uint8 GNSS_PSEUDORANGE_DIFFERENTIAL = 2\n"
"uint8 GNSS_FIX_SOLUTION = 4\n"
"uint8 GNSS_FLOATING_SOLUTION = 5\n"
"uint8 GNSS_RECKONING_MODE = 6\n"
"uint8 GNSS_MANUAL_FIXED = 7\n"
"uint8 GNSS_SIMULATOR_MODE = 8\n"
"uint8 GNSS_WAAS = 9\n"
"uint8 gnss_quality\n"
"\n"
"uint8 number_of_using_satellites\n"
"\n"
"float64 horizontal_dilution_of_precision\n"
"\n"
"string UNITS_KILOMETER = KM\n"
"string UNITS_METER = M\n"
"string UNITS_DECIMETER = DM\n"
"string UNITS_CENTIMETER = CM\n"
"\n"
"float64 altitude\n"
"string altitude_units\n"
"\n"
"float64 undulation\n"
"string undulation_units\n"
"\n"
"uint8 differential_age\n"
"string differential_station_id\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utc_time);
      stream.next(m.latitude);
      stream.next(m.latitude_direction);
      stream.next(m.longitude);
      stream.next(m.longitude_direction);
      stream.next(m.gnss_quality);
      stream.next(m.number_of_using_satellites);
      stream.next(m.horizontal_dilution_of_precision);
      stream.next(m.altitude);
      stream.next(m.altitude_units);
      stream.next(m.undulation);
      stream.next(m.undulation_units);
      stream.next(m.differential_age);
      stream.next(m.differential_station_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NMEA_GPGGA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_driver::NMEA_GPGGA_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utc_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.utc_time);
    s << indent << "latitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.latitude);
    s << indent << "latitude_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.latitude_direction);
    s << indent << "longitude: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.longitude);
    s << indent << "longitude_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.longitude_direction);
    s << indent << "gnss_quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnss_quality);
    s << indent << "number_of_using_satellites: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number_of_using_satellites);
    s << indent << "horizontal_dilution_of_precision: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_dilution_of_precision);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "altitude_units: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.altitude_units);
    s << indent << "undulation: ";
    Printer<double>::stream(s, indent + "  ", v.undulation);
    s << indent << "undulation_units: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.undulation_units);
    s << indent << "differential_age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.differential_age);
    s << indent << "differential_station_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.differential_station_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_DRIVER_MESSAGE_NMEA_GPGGA_H
