// Generated by gencpp from file integrated_navigation_reader/SPANLog_CORRIMUDATAB.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_CORRIMUDATAB_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_CORRIMUDATAB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <integrated_navigation_reader/BinaryHeader.h>

namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct SPANLog_CORRIMUDATAB_
{
  typedef SPANLog_CORRIMUDATAB_<ContainerAllocator> Type;

  SPANLog_CORRIMUDATAB_()
    : header()
    , log_header()
    , week(0)
    , seconds(0.0)
    , pitch_rate(0.0)
    , roll_rate(0.0)
    , yaw_rate(0.0)
    , lateral_acceleration(0.0)
    , longitudinal_acceleration(0.0)
    , vertical_acceleration(0.0)  {
    }
  SPANLog_CORRIMUDATAB_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , log_header(_alloc)
    , week(0)
    , seconds(0.0)
    , pitch_rate(0.0)
    , roll_rate(0.0)
    , yaw_rate(0.0)
    , lateral_acceleration(0.0)
    , longitudinal_acceleration(0.0)
    , vertical_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator>  _log_header_type;
  _log_header_type log_header;

   typedef uint32_t _week_type;
  _week_type week;

   typedef double _seconds_type;
  _seconds_type seconds;

   typedef double _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef double _roll_rate_type;
  _roll_rate_type roll_rate;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _lateral_acceleration_type;
  _lateral_acceleration_type lateral_acceleration;

   typedef double _longitudinal_acceleration_type;
  _longitudinal_acceleration_type longitudinal_acceleration;

   typedef double _vertical_acceleration_type;
  _vertical_acceleration_type vertical_acceleration;





  typedef boost::shared_ptr< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> const> ConstPtr;

}; // struct SPANLog_CORRIMUDATAB_

typedef ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<std::allocator<void> > SPANLog_CORRIMUDATAB;

typedef boost::shared_ptr< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB > SPANLog_CORRIMUDATABPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB const> SPANLog_CORRIMUDATABConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.log_header == rhs.log_header &&
    lhs.week == rhs.week &&
    lhs.seconds == rhs.seconds &&
    lhs.pitch_rate == rhs.pitch_rate &&
    lhs.roll_rate == rhs.roll_rate &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.lateral_acceleration == rhs.lateral_acceleration &&
    lhs.longitudinal_acceleration == rhs.longitudinal_acceleration &&
    lhs.vertical_acceleration == rhs.vertical_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4b3d54e4502397954e9a0361aa7c031";
  }

  static const char* value(const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4b3d54e45023979ULL;
  static const uint64_t static_value2 = 0x54e9a0361aa7c031ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/SPANLog_CORRIMUDATAB";
  }

  static const char* value(const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# page 1038\n"
"std_msgs/Header header\n"
"\n"
"BinaryHeader log_header\n"
"\n"
"#Data\n"
"uint32 week\n"
"float64 seconds\n"
"\n"
"float64 pitch_rate\n"
"float64 roll_rate\n"
"float64 yaw_rate\n"
"\n"
"float64 lateral_acceleration\n"
"float64 longitudinal_acceleration\n"
"float64 vertical_acceleration\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: integrated_navigation_reader/BinaryHeader\n"
"#INSPVAX header\n"
"uint8 Binary_Format = 0\n"
"uint8 ASCII_Format = 1\n"
"uint8 Abbreviated_ASCII_NMEA_Format = 10\n"
"uint8 Reserved = 11\n"
"uint8 Original_Message = 0\n"
"uint8 Response_Message = 1\n"
"uint8[2] message_type\n"
"\n"
"uint16 NO_PORTS = 0\n"
"uint16 COM1 = 32\n"
"uint16 COM2 = 64\n"
"uint16 COM3 = 96\n"
"uint16 SPECIAL = 160\n"
"uint16 THISPORT = 192\n"
"uint16 FILE = 224\n"
"uint16 USB1 = 1440\n"
"uint16 USB2 = 1696\n"
"uint16 USB3 = 1952\n"
"uint16 AUX = 2208\n"
"uint16 COM4 = 2976\n"
"uint16 ETH1 = 3232\n"
"uint16 IMU = 3488\n"
"uint16 ICOM1 = 4000\n"
"uint16 ICOM2 = 4256\n"
"uint16 ICOM3 = 4512\n"
"uint16 NCOM1 = 4768\n"
"uint16 NCOM2 = 5024\n"
"uint16 NCOM3 = 5280\n"
"uint16 ICOM4 = 5536\n"
"uint16 WCOM1 = 5792\n"
"uint16 COM5 = 6048\n"
"uint16 COM6 = 6304\n"
"uint16 BT1 = 6560\n"
"uint16 COM7 = 6816\n"
"uint16 COM8 = 7072\n"
"uint16 COM9 = 7328\n"
"uint16 COM10 = 7584\n"
"uint16 CCOM1 = 7840\n"
"uint16 CCOM2 = 8096\n"
"uint16 CCOM3 = 8352\n"
"uint16 CCOM4 = 8608\n"
"uint16 CCOM5 = 8864\n"
"uint16 CCOM6 = 9120\n"
"uint16 ICOM5 = 9888\n"
"uint16 ICOM6 = 10144\n"
"uint16 ICOM7 = 10400\n"
"uint16 SCOM1 = 10656\n"
"uint16 SCOM2 = 10912\n"
"uint16 SCOM3 = 11168\n"
"uint16 SCOM4 = 11424\n"
"uint16 port_address\n"
"\n"
"uint16 message_length\n"
"int32 sequence\n"
"\n"
"float64 idle_time\n"
"\n"
"uint8 UNKNOWN = 20\n"
"uint8 APPROXIMATE = 60\n"
"uint8 COARSEADJUSTING = 80\n"
"uint8 COARSE = 100\n"
"uint8 COARSESTEERING = 120\n"
"uint8 FREEWHEELING = 130\n"
"uint8 FINEADJUSTING = 140\n"
"uint8 FINE = 160\n"
"uint8 FINEBACKUPSTEERING = 170\n"
"uint8 FINESTEERING = 180\n"
"uint8 SATTIME = 200\n"
"uint8 time_status\n"
"\n"
"uint16 week\n"
"uint64 milliseconds\n"
"\n"
"Log_ReceiverStatus receiver_status\n"
"string reserved\n"
"uint32 receiver_sw_version\n"
"================================================================================\n"
"MSG: integrated_navigation_reader/Log_ReceiverStatus\n"
"# Receiver status - page 858\n"
"\n"
"bool OK = 0\n"
"bool Valid = 0\n"
"bool No_error = 0\n"
"bool No_overrun = 0\n"
"\n"
"bool Warning = 1\n"
"bool Error = 1\n"
"bool Failure = 1\n"
"bool Overrun = 1\n"
"bool Invalid = 1\n"
"\n"
"# N0\n"
"bool error_flag\n"
"\n"
"bool Within_specifications = 0\n"
"bool temperature_status\n"
"bool voltage_supply_status\n"
"\n"
"bool Powered = 0\n"
"bool Not_powered = 1\n"
"bool primary_antenna_power_status\n"
"\n"
"# N1\n"
"bool LNA_failure\n"
"\n"
"bool Open_and_Antenna_disconnected = 1\n"
"bool primary_antenna_open_circuit_flag\n"
"\n"
"bool Short_circuit_detected = 1\n"
"bool primary_antenna_short_circuit_flag\n"
"\n"
"bool No_overload = 0\n"
"bool Overload = 1\n"
"bool CPU_overload_flag\n"
"\n"
"# N2\n"
"bool COM_port_transmit_buffer_overrun\n"
"\n"
"bool Not_detected = 0\n"
"bool Detected = 1\n"
"bool spoofing_detection_status\n"
"\n"
"bool reserved\n"
"bool link_overrun_flag\n"
"\n"
"# N3\n"
"bool input_overrun_flag\n"
"bool aux_transmit_overrun_flag\n"
"\n"
"bool Out_of_range = 1\n"
"bool antenna_gain_state\n"
"\n"
"bool Jammer_Detected = 1\n"
"bool jammer_detected\n"
"\n"
"# N4\n"
"bool No_INS_reset = 0\n"
"bool INS_reset = 1\n"
"bool INS_reset_flag\n"
"\n"
"bool No_IMU_communication = 1\n"
"bool IMU_communication_failure\n"
"\n"
"bool GPS_almanac_flag_UTC_known\n"
"bool position_solution_flag\n"
"\n"
"# N5\n"
"bool Not_fixed = 0\n"
"bool Fixed = 1\n"
"bool position_fixed_flag\n"
"\n"
"bool Enabled_clock_steering = 0\n"
"bool Disabled_clock_steering = 1\n"
"bool clock_steering_status\n"
"\n"
"bool clock_model_flag\n"
"\n"
"bool UnLocked = 0\n"
"bool Locked = 1\n"
"bool external_oscillator_locked_flag\n"
"\n"
"# N6\n"
"bool software_resource\n"
"\n"
"bool OEM6_or_earlier_format = 0\n"
"bool OEM7_format = 1\n"
"bool status_error_version_bit\n"
"\n"
"bool version_bit_1\n"
"\n"
"bool Normal_tracking = 0\n"
"bool HDR_tracking = 1\n"
"bool tracking_mode\n"
"\n"
"# N7\n"
"bool Disables_digital_filtering = 0\n"
"bool Enables_digital_filtering = 1\n"
"bool digital_filtering_enabled\n"
"\n"
"bool No_event = 0\n"
"bool Event = 1\n"
"bool auxiliary_3_status_event_flag\n"
"bool auxiliary_2_status_event_flag\n"
"bool auxiliary_1_status_event_flag\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.log_header);
      stream.next(m.week);
      stream.next(m.seconds);
      stream.next(m.pitch_rate);
      stream.next(m.roll_rate);
      stream.next(m.yaw_rate);
      stream.next(m.lateral_acceleration);
      stream.next(m.longitudinal_acceleration);
      stream.next(m.vertical_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SPANLog_CORRIMUDATAB_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::SPANLog_CORRIMUDATAB_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "log_header: ";
    s << std::endl;
    Printer< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.log_header);
    s << indent << "week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.week);
    s << indent << "seconds: ";
    Printer<double>::stream(s, indent + "  ", v.seconds);
    s << indent << "pitch_rate: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "roll_rate: ";
    Printer<double>::stream(s, indent + "  ", v.roll_rate);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "lateral_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_acceleration);
    s << indent << "longitudinal_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.longitudinal_acceleration);
    s << indent << "vertical_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_CORRIMUDATAB_H
