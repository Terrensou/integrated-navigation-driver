// Generated by gencpp from file integrated_navigation_reader/NMEA_NVSTD.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_NMEA_NVSTD_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_NMEA_NVSTD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct NMEA_NVSTD_
{
  typedef NMEA_NVSTD_<ContainerAllocator> Type;

  NMEA_NVSTD_()
    : header()
    , heading_std(0.0)
    , pitch_std(0.0)
    , roll_std(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , velocity_e_std(0.0)
    , velocity_n_std(0.0)
    , velocity_u_std(0.0)  {
    }
  NMEA_NVSTD_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , heading_std(0.0)
    , pitch_std(0.0)
    , roll_std(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , velocity_e_std(0.0)
    , velocity_n_std(0.0)
    , velocity_u_std(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _heading_std_type;
  _heading_std_type heading_std;

   typedef double _pitch_std_type;
  _pitch_std_type pitch_std;

   typedef double _roll_std_type;
  _roll_std_type roll_std;

   typedef double _latitude_std_type;
  _latitude_std_type latitude_std;

   typedef double _longitude_std_type;
  _longitude_std_type longitude_std;

   typedef double _altitude_std_type;
  _altitude_std_type altitude_std;

   typedef double _velocity_e_std_type;
  _velocity_e_std_type velocity_e_std;

   typedef double _velocity_n_std_type;
  _velocity_n_std_type velocity_n_std;

   typedef double _velocity_u_std_type;
  _velocity_u_std_type velocity_u_std;





  typedef boost::shared_ptr< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> const> ConstPtr;

}; // struct NMEA_NVSTD_

typedef ::integrated_navigation_reader::NMEA_NVSTD_<std::allocator<void> > NMEA_NVSTD;

typedef boost::shared_ptr< ::integrated_navigation_reader::NMEA_NVSTD > NMEA_NVSTDPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::NMEA_NVSTD const> NMEA_NVSTDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.heading_std == rhs.heading_std &&
    lhs.pitch_std == rhs.pitch_std &&
    lhs.roll_std == rhs.roll_std &&
    lhs.latitude_std == rhs.latitude_std &&
    lhs.longitude_std == rhs.longitude_std &&
    lhs.altitude_std == rhs.altitude_std &&
    lhs.velocity_e_std == rhs.velocity_e_std &&
    lhs.velocity_n_std == rhs.velocity_n_std &&
    lhs.velocity_u_std == rhs.velocity_u_std;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e795cf47447076149a859c1fd5e6e5d0";
  }

  static const char* value(const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe795cf4744707614ULL;
  static const uint64_t static_value2 = 0x9a859c1fd5e6e5d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/NMEA_NVSTD";
  }

  static const char* value(const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n"
"\n"
"float64 heading_std\n"
"float64 pitch_std\n"
"float64 roll_std\n"
"\n"
"float64 latitude_std\n"
"float64 longitude_std\n"
"float64 altitude_std\n"
"\n"
"float64 velocity_e_std\n"
"float64 velocity_n_std\n"
"float64 velocity_u_std\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.heading_std);
      stream.next(m.pitch_std);
      stream.next(m.roll_std);
      stream.next(m.latitude_std);
      stream.next(m.longitude_std);
      stream.next(m.altitude_std);
      stream.next(m.velocity_e_std);
      stream.next(m.velocity_n_std);
      stream.next(m.velocity_u_std);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NMEA_NVSTD_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::NMEA_NVSTD_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "heading_std: ";
    Printer<double>::stream(s, indent + "  ", v.heading_std);
    s << indent << "pitch_std: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_std);
    s << indent << "roll_std: ";
    Printer<double>::stream(s, indent + "  ", v.roll_std);
    s << indent << "latitude_std: ";
    Printer<double>::stream(s, indent + "  ", v.latitude_std);
    s << indent << "longitude_std: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_std);
    s << indent << "altitude_std: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_std);
    s << indent << "velocity_e_std: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_e_std);
    s << indent << "velocity_n_std: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_n_std);
    s << indent << "velocity_u_std: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_u_std);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_NMEA_NVSTD_H
