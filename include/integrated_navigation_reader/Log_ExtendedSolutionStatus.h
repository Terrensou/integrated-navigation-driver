// Generated by gencpp from file integrated_navigation_reader/Log_ExtendedSolutionStatus.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_EXTENDEDSOLUTIONSTATUS_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_EXTENDEDSOLUTIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct Log_ExtendedSolutionStatus_
{
  typedef Log_ExtendedSolutionStatus_<ContainerAllocator> Type;

  Log_ExtendedSolutionStatus_()
    : RTK_or_PDP_GLIDE_solution(false)
    , pseudorange_iono_correction(0)
    , RTK_assist_active(false)
    , antenna_information_status(false)
    , reserved(false)
    , used_terrain_compensation_corrections(false)  {
    }
  Log_ExtendedSolutionStatus_(const ContainerAllocator& _alloc)
    : RTK_or_PDP_GLIDE_solution(false)
    , pseudorange_iono_correction(0)
    , RTK_assist_active(false)
    , antenna_information_status(false)
    , reserved(false)
    , used_terrain_compensation_corrections(false)  {
  (void)_alloc;
    }



   typedef uint8_t _RTK_or_PDP_GLIDE_solution_type;
  _RTK_or_PDP_GLIDE_solution_type RTK_or_PDP_GLIDE_solution;

   typedef uint8_t _pseudorange_iono_correction_type;
  _pseudorange_iono_correction_type pseudorange_iono_correction;

   typedef uint8_t _RTK_assist_active_type;
  _RTK_assist_active_type RTK_assist_active;

   typedef uint8_t _antenna_information_status_type;
  _antenna_information_status_type antenna_information_status;

   typedef uint8_t _reserved_type;
  _reserved_type reserved;

   typedef uint8_t _used_terrain_compensation_corrections_type;
  _used_terrain_compensation_corrections_type used_terrain_compensation_corrections;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Unknown_or_default_Klobuchar_model)
  #undef Unknown_or_default_Klobuchar_model
#endif
#if defined(_WIN32) && defined(Klobuchar_Broadcast)
  #undef Klobuchar_Broadcast
#endif
#if defined(_WIN32) && defined(SBAS_Broadcast)
  #undef SBAS_Broadcast
#endif
#if defined(_WIN32) && defined(Multi_frequency_Computed)
  #undef Multi_frequency_Computed
#endif
#if defined(_WIN32) && defined(PSRDiff_correction)
  #undef PSRDiff_correction
#endif
#if defined(_WIN32) && defined(Novatel_Blended_Iono_Value)
  #undef Novatel_Blended_Iono_Value
#endif

  enum {
    Unknown_or_default_Klobuchar_model = 0u,
    Klobuchar_Broadcast = 1u,
    SBAS_Broadcast = 2u,
    Multi_frequency_Computed = 3u,
    PSRDiff_correction = 4u,
    Novatel_Blended_Iono_Value = 5u,
  };


  typedef boost::shared_ptr< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> const> ConstPtr;

}; // struct Log_ExtendedSolutionStatus_

typedef ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<std::allocator<void> > Log_ExtendedSolutionStatus;

typedef boost::shared_ptr< ::integrated_navigation_reader::Log_ExtendedSolutionStatus > Log_ExtendedSolutionStatusPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::Log_ExtendedSolutionStatus const> Log_ExtendedSolutionStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator2> & rhs)
{
  return lhs.RTK_or_PDP_GLIDE_solution == rhs.RTK_or_PDP_GLIDE_solution &&
    lhs.pseudorange_iono_correction == rhs.pseudorange_iono_correction &&
    lhs.RTK_assist_active == rhs.RTK_assist_active &&
    lhs.antenna_information_status == rhs.antenna_information_status &&
    lhs.reserved == rhs.reserved &&
    lhs.used_terrain_compensation_corrections == rhs.used_terrain_compensation_corrections;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8942d5a8cf48131a9a66fb65643b08c1";
  }

  static const char* value(const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8942d5a8cf48131aULL;
  static const uint64_t static_value2 = 0x9a66fb65643b08c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/Log_ExtendedSolutionStatus";
  }

  static const char* value(const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Solution status - page 504\n"
"\n"
"bool RTK_or_PDP_GLIDE_solution\n"
"\n"
"uint8 Unknown_or_default_Klobuchar_model = 0\n"
"uint8 Klobuchar_Broadcast = 1\n"
"uint8 SBAS_Broadcast = 2\n"
"uint8 Multi_frequency_Computed = 3\n"
"uint8 PSRDiff_correction = 4\n"
"uint8 Novatel_Blended_Iono_Value = 5\n"
"uint8 pseudorange_iono_correction\n"
"\n"
"bool RTK_assist_active\n"
"bool antenna_information_status\n"
"bool reserved\n"
"bool used_terrain_compensation_corrections\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RTK_or_PDP_GLIDE_solution);
      stream.next(m.pseudorange_iono_correction);
      stream.next(m.RTK_assist_active);
      stream.next(m.antenna_information_status);
      stream.next(m.reserved);
      stream.next(m.used_terrain_compensation_corrections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Log_ExtendedSolutionStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::Log_ExtendedSolutionStatus_<ContainerAllocator>& v)
  {
    s << indent << "RTK_or_PDP_GLIDE_solution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RTK_or_PDP_GLIDE_solution);
    s << indent << "pseudorange_iono_correction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pseudorange_iono_correction);
    s << indent << "RTK_assist_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RTK_assist_active);
    s << indent << "antenna_information_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.antenna_information_status);
    s << indent << "reserved: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserved);
    s << indent << "used_terrain_compensation_corrections: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.used_terrain_compensation_corrections);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_EXTENDEDSOLUTIONSTATUS_H
