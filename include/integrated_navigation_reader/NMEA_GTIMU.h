// Generated by gencpp from file integrated_navigation_reader/NMEA_GTIMU.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_NMEA_GTIMU_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_NMEA_GTIMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct NMEA_GTIMU_
{
  typedef NMEA_GTIMU_<ContainerAllocator> Type;

  NMEA_GTIMU_()
    : header()
    , gnss_week(0)
    , gnss_time(0.0)
    , gyroscope_x(0.0)
    , gyroscope_y(0.0)
    , gyroscope_z(0.0)
    , acceleration_x(0.0)
    , acceleration_y(0.0)
    , acceleration_z(0.0)
    , temperature(0.0)  {
    }
  NMEA_GTIMU_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gnss_week(0)
    , gnss_time(0.0)
    , gyroscope_x(0.0)
    , gyroscope_y(0.0)
    , gyroscope_z(0.0)
    , acceleration_x(0.0)
    , acceleration_y(0.0)
    , acceleration_z(0.0)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _gnss_week_type;
  _gnss_week_type gnss_week;

   typedef double _gnss_time_type;
  _gnss_time_type gnss_time;

   typedef double _gyroscope_x_type;
  _gyroscope_x_type gyroscope_x;

   typedef double _gyroscope_y_type;
  _gyroscope_y_type gyroscope_y;

   typedef double _gyroscope_z_type;
  _gyroscope_z_type gyroscope_z;

   typedef double _acceleration_x_type;
  _acceleration_x_type acceleration_x;

   typedef double _acceleration_y_type;
  _acceleration_y_type acceleration_y;

   typedef double _acceleration_z_type;
  _acceleration_z_type acceleration_z;

   typedef double _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> const> ConstPtr;

}; // struct NMEA_GTIMU_

typedef ::integrated_navigation_reader::NMEA_GTIMU_<std::allocator<void> > NMEA_GTIMU;

typedef boost::shared_ptr< ::integrated_navigation_reader::NMEA_GTIMU > NMEA_GTIMUPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::NMEA_GTIMU const> NMEA_GTIMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gnss_week == rhs.gnss_week &&
    lhs.gnss_time == rhs.gnss_time &&
    lhs.gyroscope_x == rhs.gyroscope_x &&
    lhs.gyroscope_y == rhs.gyroscope_y &&
    lhs.gyroscope_z == rhs.gyroscope_z &&
    lhs.acceleration_x == rhs.acceleration_x &&
    lhs.acceleration_y == rhs.acceleration_y &&
    lhs.acceleration_z == rhs.acceleration_z &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f2a4f3f75da61740da85c5a778a5264";
  }

  static const char* value(const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f2a4f3f75da6174ULL;
  static const uint64_t static_value2 = 0x0da85c5a778a5264ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/NMEA_GTIMU";
  }

  static const char* value(const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n"
"\n"
"int16   gnss_week\n"
"float64 gnss_time\n"
"\n"
"float64 gyroscope_x\n"
"float64 gyroscope_y\n"
"float64 gyroscope_z\n"
"\n"
"float64 acceleration_x\n"
"float64 acceleration_y\n"
"float64 acceleration_z\n"
"\n"
"float64 temperature\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gnss_week);
      stream.next(m.gnss_time);
      stream.next(m.gyroscope_x);
      stream.next(m.gyroscope_y);
      stream.next(m.gyroscope_z);
      stream.next(m.acceleration_x);
      stream.next(m.acceleration_y);
      stream.next(m.acceleration_z);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NMEA_GTIMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::NMEA_GTIMU_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gnss_week: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gnss_week);
    s << indent << "gnss_time: ";
    Printer<double>::stream(s, indent + "  ", v.gnss_time);
    s << indent << "gyroscope_x: ";
    Printer<double>::stream(s, indent + "  ", v.gyroscope_x);
    s << indent << "gyroscope_y: ";
    Printer<double>::stream(s, indent + "  ", v.gyroscope_y);
    s << indent << "gyroscope_z: ";
    Printer<double>::stream(s, indent + "  ", v.gyroscope_z);
    s << indent << "acceleration_x: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_x);
    s << indent << "acceleration_y: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_y);
    s << indent << "acceleration_z: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_z);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_NMEA_GTIMU_H
