// Generated by gencpp from file integrated_navigation_reader/Spanlog_INSPVAXB.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_INSPVAXB_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_INSPVAXB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <integrated_navigation_reader/Spanlog_BinaryHeader.h>

namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct Spanlog_INSPVAXB_
{
  typedef Spanlog_INSPVAXB_<ContainerAllocator> Type;

  Spanlog_INSPVAXB_()
    : header()
    , log_header()
    , ins_status(0)
    , position_type(0)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , undulation(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , height_std(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , up_velocity_std(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , azimuth_std(0.0)
    , extended_solution_status()
    , time_since_update(0)  {
    }
  Spanlog_INSPVAXB_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , log_header(_alloc)
    , ins_status(0)
    , position_type(0)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , undulation(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , height_std(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , up_velocity_std(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , azimuth_std(0.0)
    , extended_solution_status(_alloc)
    , time_since_update(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::integrated_navigation_reader::Spanlog_BinaryHeader_<ContainerAllocator>  _log_header_type;
  _log_header_type log_header;

   typedef uint8_t _ins_status_type;
  _ins_status_type ins_status;

   typedef uint8_t _position_type_type;
  _position_type_type position_type;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef double _undulation_type;
  _undulation_type undulation;

   typedef double _north_velocity_type;
  _north_velocity_type north_velocity;

   typedef double _east_velocity_type;
  _east_velocity_type east_velocity;

   typedef double _up_velocity_type;
  _up_velocity_type up_velocity;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef double _latitude_std_type;
  _latitude_std_type latitude_std;

   typedef double _longitude_std_type;
  _longitude_std_type longitude_std;

   typedef double _height_std_type;
  _height_std_type height_std;

   typedef double _north_velocity_std_type;
  _north_velocity_std_type north_velocity_std;

   typedef double _east_velocity_std_type;
  _east_velocity_std_type east_velocity_std;

   typedef double _up_velocity_std_type;
  _up_velocity_std_type up_velocity_std;

   typedef double _roll_std_type;
  _roll_std_type roll_std;

   typedef double _pitch_std_type;
  _pitch_std_type pitch_std;

   typedef double _azimuth_std_type;
  _azimuth_std_type azimuth_std;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _extended_solution_status_type;
  _extended_solution_status_type extended_solution_status;

   typedef uint16_t _time_since_update_type;
  _time_since_update_type time_since_update;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INS_INACTIVE)
  #undef INS_INACTIVE
#endif
#if defined(_WIN32) && defined(INS_ALIGNING)
  #undef INS_ALIGNING
#endif
#if defined(_WIN32) && defined(INS_HIGH_VARIANCE)
  #undef INS_HIGH_VARIANCE
#endif
#if defined(_WIN32) && defined(INS_SOLUTION_GOOD)
  #undef INS_SOLUTION_GOOD
#endif
#if defined(_WIN32) && defined(INS_SOLUTION_FREE)
  #undef INS_SOLUTION_FREE
#endif
#if defined(_WIN32) && defined(INS_ALIGNMENT_COMPLETE)
  #undef INS_ALIGNMENT_COMPLETE
#endif
#if defined(_WIN32) && defined(DETERMINING_ORIENTATION)
  #undef DETERMINING_ORIENTATION
#endif
#if defined(_WIN32) && defined(WAITING_INITIALPOS)
  #undef WAITING_INITIALPOS
#endif
#if defined(_WIN32) && defined(WAITING_AZIMUTH)
  #undef WAITING_AZIMUTH
#endif
#if defined(_WIN32) && defined(INITIALIZING_BIASES)
  #undef INITIALIZING_BIASES
#endif
#if defined(_WIN32) && defined(MOTION_DETECT)
  #undef MOTION_DETECT
#endif
#if defined(_WIN32) && defined(WAITING_ALIGNMENTORIENTATION)
  #undef WAITING_ALIGNMENTORIENTATION
#endif
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(FIXEDPOS)
  #undef FIXEDPOS
#endif
#if defined(_WIN32) && defined(FIXEDHEIGHT)
  #undef FIXEDHEIGHT
#endif
#if defined(_WIN32) && defined(DOPPLER_VELOCITY)
  #undef DOPPLER_VELOCITY
#endif
#if defined(_WIN32) && defined(SINGLE)
  #undef SINGLE
#endif
#if defined(_WIN32) && defined(PSRDIFF)
  #undef PSRDIFF
#endif
#if defined(_WIN32) && defined(WAAS)
  #undef WAAS
#endif
#if defined(_WIN32) && defined(PROPAGATED)
  #undef PROPAGATED
#endif
#if defined(_WIN32) && defined(L1_FLOAT)
  #undef L1_FLOAT
#endif
#if defined(_WIN32) && defined(NARROW_FLOAT)
  #undef NARROW_FLOAT
#endif
#if defined(_WIN32) && defined(L1_INT)
  #undef L1_INT
#endif
#if defined(_WIN32) && defined(WIDE_INT)
  #undef WIDE_INT
#endif
#if defined(_WIN32) && defined(NARROW_INT)
  #undef NARROW_INT
#endif
#if defined(_WIN32) && defined(RTK_DIRECT_INS)
  #undef RTK_DIRECT_INS
#endif
#if defined(_WIN32) && defined(INS_SBAS)
  #undef INS_SBAS
#endif
#if defined(_WIN32) && defined(INS_PSRSP)
  #undef INS_PSRSP
#endif
#if defined(_WIN32) && defined(INS_PSRDIFF)
  #undef INS_PSRDIFF
#endif
#if defined(_WIN32) && defined(INS_RTKFLOAT)
  #undef INS_RTKFLOAT
#endif
#if defined(_WIN32) && defined(INS_RTKFIXED)
  #undef INS_RTKFIXED
#endif
#if defined(_WIN32) && defined(PPP_CONVERGING)
  #undef PPP_CONVERGING
#endif
#if defined(_WIN32) && defined(PPP)
  #undef PPP
#endif
#if defined(_WIN32) && defined(OPERATIONAL)
  #undef OPERATIONAL
#endif
#if defined(_WIN32) && defined(WARNING)
  #undef WARNING
#endif
#if defined(_WIN32) && defined(OUT_OF_BOUNDS)
  #undef OUT_OF_BOUNDS
#endif
#if defined(_WIN32) && defined(INS_PPP_CONVERGING)
  #undef INS_PPP_CONVERGING
#endif
#if defined(_WIN32) && defined(INS_PPP)
  #undef INS_PPP
#endif
#if defined(_WIN32) && defined(PPP_BASIC_CONVERGING)
  #undef PPP_BASIC_CONVERGING
#endif
#if defined(_WIN32) && defined(PPP_BASIC)
  #undef PPP_BASIC
#endif
#if defined(_WIN32) && defined(INS_PPP_BASIC_CONVERGING)
  #undef INS_PPP_BASIC_CONVERGING
#endif
#if defined(_WIN32) && defined(INS_PPP_BASIC)
  #undef INS_PPP_BASIC
#endif

  enum {
    INS_INACTIVE = 0u,
    INS_ALIGNING = 1u,
    INS_HIGH_VARIANCE = 2u,
    INS_SOLUTION_GOOD = 3u,
    INS_SOLUTION_FREE = 6u,
    INS_ALIGNMENT_COMPLETE = 7u,
    DETERMINING_ORIENTATION = 8u,
    WAITING_INITIALPOS = 9u,
    WAITING_AZIMUTH = 10u,
    INITIALIZING_BIASES = 11u,
    MOTION_DETECT = 12u,
    WAITING_ALIGNMENTORIENTATION = 14u,
    NONE = 0u,
    FIXEDPOS = 1u,
    FIXEDHEIGHT = 2u,
    DOPPLER_VELOCITY = 8u,
    SINGLE = 16u,
    PSRDIFF = 17u,
    WAAS = 18u,
    PROPAGATED = 19u,
    L1_FLOAT = 32u,
    NARROW_FLOAT = 34u,
    L1_INT = 48u,
    WIDE_INT = 49u,
    NARROW_INT = 50u,
    RTK_DIRECT_INS = 51u,
    INS_SBAS = 52u,
    INS_PSRSP = 53u,
    INS_PSRDIFF = 54u,
    INS_RTKFLOAT = 55u,
    INS_RTKFIXED = 56u,
    PPP_CONVERGING = 68u,
    PPP = 69u,
    OPERATIONAL = 70u,
    WARNING = 71u,
    OUT_OF_BOUNDS = 72u,
    INS_PPP_CONVERGING = 73u,
    INS_PPP = 74u,
    PPP_BASIC_CONVERGING = 77u,
    PPP_BASIC = 78u,
    INS_PPP_BASIC_CONVERGING = 79u,
    INS_PPP_BASIC = 80u,
  };


  typedef boost::shared_ptr< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> const> ConstPtr;

}; // struct Spanlog_INSPVAXB_

typedef ::integrated_navigation_reader::Spanlog_INSPVAXB_<std::allocator<void> > Spanlog_INSPVAXB;

typedef boost::shared_ptr< ::integrated_navigation_reader::Spanlog_INSPVAXB > Spanlog_INSPVAXBPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::Spanlog_INSPVAXB const> Spanlog_INSPVAXBConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.log_header == rhs.log_header &&
    lhs.ins_status == rhs.ins_status &&
    lhs.position_type == rhs.position_type &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.height == rhs.height &&
    lhs.undulation == rhs.undulation &&
    lhs.north_velocity == rhs.north_velocity &&
    lhs.east_velocity == rhs.east_velocity &&
    lhs.up_velocity == rhs.up_velocity &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.azimuth == rhs.azimuth &&
    lhs.latitude_std == rhs.latitude_std &&
    lhs.longitude_std == rhs.longitude_std &&
    lhs.height_std == rhs.height_std &&
    lhs.north_velocity_std == rhs.north_velocity_std &&
    lhs.east_velocity_std == rhs.east_velocity_std &&
    lhs.up_velocity_std == rhs.up_velocity_std &&
    lhs.roll_std == rhs.roll_std &&
    lhs.pitch_std == rhs.pitch_std &&
    lhs.azimuth_std == rhs.azimuth_std &&
    lhs.extended_solution_status == rhs.extended_solution_status &&
    lhs.time_since_update == rhs.time_since_update;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68116dad8dd5445f0fd1f54b974b91a6";
  }

  static const char* value(const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68116dad8dd5445fULL;
  static const uint64_t static_value2 = 0x0fd1f54b974b91a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/Spanlog_INSPVAXB";
  }

  static const char* value(const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"Spanlog_BinaryHeader log_header\n"
"\n"
"# INS status\n"
"uint8 INS_INACTIVE = 0\n"
"uint8 INS_ALIGNING = 1\n"
"uint8 INS_HIGH_VARIANCE = 2\n"
"uint8 INS_SOLUTION_GOOD = 3\n"
"uint8 INS_SOLUTION_FREE = 6\n"
"uint8 INS_ALIGNMENT_COMPLETE = 7\n"
"uint8 DETERMINING_ORIENTATION = 8\n"
"uint8 WAITING_INITIALPOS = 9\n"
"uint8 WAITING_AZIMUTH = 10\n"
"uint8 INITIALIZING_BIASES = 11\n"
"uint8 MOTION_DETECT = 12\n"
"uint8 WAITING_ALIGNMENTORIENTATION = 14\n"
"uint8 ins_status\n"
"\n"
"#Position type\n"
"uint8 NONE = 0\n"
"uint8 FIXEDPOS = 1\n"
"uint8 FIXEDHEIGHT = 2\n"
"uint8 DOPPLER_VELOCITY = 8\n"
"uint8 SINGLE = 16\n"
"uint8 PSRDIFF = 17\n"
"uint8 WAAS = 18\n"
"uint8 PROPAGATED = 19\n"
"uint8 L1_FLOAT = 32\n"
"uint8 NARROW_FLOAT = 34\n"
"uint8 L1_INT = 48\n"
"uint8 WIDE_INT = 49\n"
"uint8 NARROW_INT = 50\n"
"uint8 RTK_DIRECT_INS = 51\n"
"uint8 INS_SBAS = 52\n"
"uint8 INS_PSRSP = 53\n"
"uint8 INS_PSRDIFF = 54\n"
"uint8 INS_RTKFLOAT = 55\n"
"uint8 INS_RTKFIXED = 56\n"
"uint8 PPP_CONVERGING = 68\n"
"uint8 PPP = 69\n"
"uint8 OPERATIONAL = 70\n"
"uint8 WARNING = 71\n"
"uint8 OUT_OF_BOUNDS = 72\n"
"uint8 INS_PPP_CONVERGING = 73\n"
"uint8 INS_PPP = 74\n"
"uint8 PPP_BASIC_CONVERGING = 77\n"
"uint8 PPP_BASIC = 78\n"
"uint8 INS_PPP_BASIC_CONVERGING = 79\n"
"uint8 INS_PPP_BASIC = 80\n"
"uint8 position_type\n"
"\n"
"#Data\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 height\n"
"float64 undulation\n"
"\n"
"float64 north_velocity\n"
"float64 east_velocity\n"
"float64 up_velocity\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 azimuth\n"
"\n"
"float64 latitude_std\n"
"float64 longitude_std\n"
"float64 height_std\n"
"\n"
"float64 north_velocity_std\n"
"float64 east_velocity_std\n"
"float64 up_velocity_std\n"
"\n"
"float64 roll_std\n"
"float64 pitch_std\n"
"float64 azimuth_std\n"
"\n"
"#Extended solution status\n"
"string extended_solution_status\n"
"\n"
"uint16 time_since_update\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: integrated_navigation_reader/Spanlog_BinaryHeader\n"
"#INSPVAX header\n"
"uint8 Binary_Format = 0\n"
"uint8 ASCII_Format = 1\n"
"uint8 Abbreviated_ASCII_NMEA_Format = 10\n"
"uint8 Reserved = 11\n"
"uint8 Original_Message = 0\n"
"uint8 Response_Message = 1\n"
"uint8[2] message_type\n"
"\n"
"uint16 NO_PORTS = 0\n"
"uint16 COM1 = 32\n"
"uint16 COM2 = 64\n"
"uint16 COM3 = 96\n"
"uint16 SPECIAL = 160\n"
"uint16 THISPORT = 192\n"
"uint16 FILE = 224\n"
"uint16 USB1 = 1440\n"
"uint16 USB2 = 1696\n"
"uint16 USB3 = 1952\n"
"uint16 AUX = 2208\n"
"uint16 COM4 = 2976\n"
"uint16 ETH1 = 3232\n"
"uint16 IMU = 3488\n"
"uint16 ICOM1 = 4000\n"
"uint16 ICOM2 = 4256\n"
"uint16 ICOM3 = 4512\n"
"uint16 NCOM1 = 4768\n"
"uint16 NCOM2 = 5024\n"
"uint16 NCOM3 = 5280\n"
"uint16 ICOM4 = 5536\n"
"uint16 WCOM1 = 5792\n"
"uint16 COM5 = 6048\n"
"uint16 COM6 = 6304\n"
"uint16 BT1 = 6560\n"
"uint16 COM7 = 6816\n"
"uint16 COM8 = 7072\n"
"uint16 COM9 = 7328\n"
"uint16 COM10 = 7584\n"
"uint16 CCOM1 = 7840\n"
"uint16 CCOM2 = 8096\n"
"uint16 CCOM3 = 8352\n"
"uint16 CCOM4 = 8608\n"
"uint16 CCOM5 = 8864\n"
"uint16 CCOM6 = 9120\n"
"uint16 ICOM5 = 9888\n"
"uint16 ICOM6 = 10144\n"
"uint16 ICOM7 = 10400\n"
"uint16 SCOM1 = 10656\n"
"uint16 SCOM2 = 10912\n"
"uint16 SCOM3 = 11168\n"
"uint16 SCOM4 = 11424\n"
"uint16 port_address\n"
"\n"
"uint16 message_length\n"
"int32 sequence\n"
"\n"
"float32 idle_time\n"
"\n"
"uint8 UNKNOWN = 20\n"
"uint8 APPROXIMATE = 20\n"
"uint8 COARSEADJUSTING = 20\n"
"uint8 COARSE = 20\n"
"uint8 COARSESTEERING = 20\n"
"uint8 FREEWHEELING = 20\n"
"uint8 FINEADJUSTING = 20\n"
"uint8 FINE = 20\n"
"uint8 FINEBACKUPSTEERING = 20\n"
"uint8 FINESTEERING = 20\n"
"uint8 SATTIME = 20\n"
"uint8 time_status\n"
"\n"
"uint16 week\n"
"uint64 milliseconds\n"
"\n"
"string receiver_status\n"
"string reserved\n"
"uint32 receiver_sw_version\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.log_header);
      stream.next(m.ins_status);
      stream.next(m.position_type);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.undulation);
      stream.next(m.north_velocity);
      stream.next(m.east_velocity);
      stream.next(m.up_velocity);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.azimuth);
      stream.next(m.latitude_std);
      stream.next(m.longitude_std);
      stream.next(m.height_std);
      stream.next(m.north_velocity_std);
      stream.next(m.east_velocity_std);
      stream.next(m.up_velocity_std);
      stream.next(m.roll_std);
      stream.next(m.pitch_std);
      stream.next(m.azimuth_std);
      stream.next(m.extended_solution_status);
      stream.next(m.time_since_update);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Spanlog_INSPVAXB_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::Spanlog_INSPVAXB_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "log_header: ";
    s << std::endl;
    Printer< ::integrated_navigation_reader::Spanlog_BinaryHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.log_header);
    s << indent << "ins_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ins_status);
    s << indent << "position_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_type);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "undulation: ";
    Printer<double>::stream(s, indent + "  ", v.undulation);
    s << indent << "north_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.north_velocity);
    s << indent << "east_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.east_velocity);
    s << indent << "up_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.up_velocity);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "latitude_std: ";
    Printer<double>::stream(s, indent + "  ", v.latitude_std);
    s << indent << "longitude_std: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_std);
    s << indent << "height_std: ";
    Printer<double>::stream(s, indent + "  ", v.height_std);
    s << indent << "north_velocity_std: ";
    Printer<double>::stream(s, indent + "  ", v.north_velocity_std);
    s << indent << "east_velocity_std: ";
    Printer<double>::stream(s, indent + "  ", v.east_velocity_std);
    s << indent << "up_velocity_std: ";
    Printer<double>::stream(s, indent + "  ", v.up_velocity_std);
    s << indent << "roll_std: ";
    Printer<double>::stream(s, indent + "  ", v.roll_std);
    s << indent << "pitch_std: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_std);
    s << indent << "azimuth_std: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth_std);
    s << indent << "extended_solution_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.extended_solution_status);
    s << indent << "time_since_update: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_since_update);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_INSPVAXB_H
