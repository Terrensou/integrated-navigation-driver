// Generated by gencpp from file integrated_navigation_reader/Log_GalileoBeiDouSignalUsedMask.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_GALILEOBEIDOUSIGNALUSEDMASK_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_GALILEOBEIDOUSIGNALUSEDMASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct Log_GalileoBeiDouSignalUsedMask_
{
  typedef Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> Type;

  Log_GalileoBeiDouSignalUsedMask_()
    : galileo_E1(false)
    , galileo_E5a(false)
    , galileo_E5b(false)
    , galileo_ALTBOC(false)
    , beidou_B1(false)
    , beidou_B2(false)
    , beidou_B3(false)
    , galileo_E6(false)  {
    }
  Log_GalileoBeiDouSignalUsedMask_(const ContainerAllocator& _alloc)
    : galileo_E1(false)
    , galileo_E5a(false)
    , galileo_E5b(false)
    , galileo_ALTBOC(false)
    , beidou_B1(false)
    , beidou_B2(false)
    , beidou_B3(false)
    , galileo_E6(false)  {
  (void)_alloc;
    }



   typedef uint8_t _galileo_E1_type;
  _galileo_E1_type galileo_E1;

   typedef uint8_t _galileo_E5a_type;
  _galileo_E5a_type galileo_E5a;

   typedef uint8_t _galileo_E5b_type;
  _galileo_E5b_type galileo_E5b;

   typedef uint8_t _galileo_ALTBOC_type;
  _galileo_ALTBOC_type galileo_ALTBOC;

   typedef uint8_t _beidou_B1_type;
  _beidou_B1_type beidou_B1;

   typedef uint8_t _beidou_B2_type;
  _beidou_B2_type beidou_B2;

   typedef uint8_t _beidou_B3_type;
  _beidou_B3_type beidou_B3;

   typedef uint8_t _galileo_E6_type;
  _galileo_E6_type galileo_E6;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Unused)
  #undef Unused
#endif
#if defined(_WIN32) && defined(Used)
  #undef Used
#endif


  static const uint8_t Unused;
  static const uint8_t Used;

  typedef boost::shared_ptr< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> const> ConstPtr;

}; // struct Log_GalileoBeiDouSignalUsedMask_

typedef ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<std::allocator<void> > Log_GalileoBeiDouSignalUsedMask;

typedef boost::shared_ptr< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask > Log_GalileoBeiDouSignalUsedMaskPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask const> Log_GalileoBeiDouSignalUsedMaskConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const uint8_t
      Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator>::Unused =
        
           0
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator>::Used =
        
           1
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator2> & rhs)
{
  return lhs.galileo_E1 == rhs.galileo_E1 &&
    lhs.galileo_E5a == rhs.galileo_E5a &&
    lhs.galileo_E5b == rhs.galileo_E5b &&
    lhs.galileo_ALTBOC == rhs.galileo_ALTBOC &&
    lhs.beidou_B1 == rhs.beidou_B1 &&
    lhs.beidou_B2 == rhs.beidou_B2 &&
    lhs.beidou_B3 == rhs.beidou_B3 &&
    lhs.galileo_E6 == rhs.galileo_E6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b8226035ebc5e27f8a6212a047757e2";
  }

  static const char* value(const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b8226035ebc5e27ULL;
  static const uint64_t static_value2 = 0xf8a6212a047757e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/Log_GalileoBeiDouSignalUsedMask";
  }

  static const char* value(const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Solution status - page 503\n"
"\n"
"bool Unused = 0\n"
"bool Used = 1\n"
"bool galileo_E1\n"
"bool galileo_E5a\n"
"bool galileo_E5b\n"
"bool galileo_ALTBOC\n"
"bool beidou_B1\n"
"bool beidou_B2\n"
"bool beidou_B3\n"
"bool galileo_E6\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.galileo_E1);
      stream.next(m.galileo_E5a);
      stream.next(m.galileo_E5b);
      stream.next(m.galileo_ALTBOC);
      stream.next(m.beidou_B1);
      stream.next(m.beidou_B2);
      stream.next(m.beidou_B3);
      stream.next(m.galileo_E6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Log_GalileoBeiDouSignalUsedMask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::Log_GalileoBeiDouSignalUsedMask_<ContainerAllocator>& v)
  {
    s << indent << "galileo_E1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.galileo_E1);
    s << indent << "galileo_E5a: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.galileo_E5a);
    s << indent << "galileo_E5b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.galileo_E5b);
    s << indent << "galileo_ALTBOC: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.galileo_ALTBOC);
    s << indent << "beidou_B1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.beidou_B1);
    s << indent << "beidou_B2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.beidou_B2);
    s << indent << "beidou_B3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.beidou_B3);
    s << indent << "galileo_E6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.galileo_E6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_GALILEOBEIDOUSIGNALUSEDMASK_H
