// Generated by gencpp from file integrated_navigation_reader/Log_GPSGLONASSSignalUsedMask.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_GPSGLONASSSIGNALUSEDMASK_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_GPSGLONASSSIGNALUSEDMASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct Log_GPSGLONASSSignalUsedMask_
{
  typedef Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> Type;

  Log_GPSGLONASSSignalUsedMask_()
    : gps_L1(false)
    , gps_L2(false)
    , gps_L5(false)
    , reserved_bit_3(false)
    , glonass_L1(false)
    , glonass_L2(false)
    , glonass_L3(false)
    , reserved_bit_7(false)  {
    }
  Log_GPSGLONASSSignalUsedMask_(const ContainerAllocator& _alloc)
    : gps_L1(false)
    , gps_L2(false)
    , gps_L5(false)
    , reserved_bit_3(false)
    , glonass_L1(false)
    , glonass_L2(false)
    , glonass_L3(false)
    , reserved_bit_7(false)  {
  (void)_alloc;
    }



   typedef uint8_t _gps_L1_type;
  _gps_L1_type gps_L1;

   typedef uint8_t _gps_L2_type;
  _gps_L2_type gps_L2;

   typedef uint8_t _gps_L5_type;
  _gps_L5_type gps_L5;

   typedef uint8_t _reserved_bit_3_type;
  _reserved_bit_3_type reserved_bit_3;

   typedef uint8_t _glonass_L1_type;
  _glonass_L1_type glonass_L1;

   typedef uint8_t _glonass_L2_type;
  _glonass_L2_type glonass_L2;

   typedef uint8_t _glonass_L3_type;
  _glonass_L3_type glonass_L3;

   typedef uint8_t _reserved_bit_7_type;
  _reserved_bit_7_type reserved_bit_7;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Unused)
  #undef Unused
#endif
#if defined(_WIN32) && defined(Used)
  #undef Used
#endif


  static const uint8_t Unused;
  static const uint8_t Used;

  typedef boost::shared_ptr< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> const> ConstPtr;

}; // struct Log_GPSGLONASSSignalUsedMask_

typedef ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<std::allocator<void> > Log_GPSGLONASSSignalUsedMask;

typedef boost::shared_ptr< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask > Log_GPSGLONASSSignalUsedMaskPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask const> Log_GPSGLONASSSignalUsedMaskConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const uint8_t
      Log_GPSGLONASSSignalUsedMask_<ContainerAllocator>::Unused =
        
           0
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      Log_GPSGLONASSSignalUsedMask_<ContainerAllocator>::Used =
        
           1
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator2> & rhs)
{
  return lhs.gps_L1 == rhs.gps_L1 &&
    lhs.gps_L2 == rhs.gps_L2 &&
    lhs.gps_L5 == rhs.gps_L5 &&
    lhs.reserved_bit_3 == rhs.reserved_bit_3 &&
    lhs.glonass_L1 == rhs.glonass_L1 &&
    lhs.glonass_L2 == rhs.glonass_L2 &&
    lhs.glonass_L3 == rhs.glonass_L3 &&
    lhs.reserved_bit_7 == rhs.reserved_bit_7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "424f0ee796779b85feeb4d976948cfa5";
  }

  static const char* value(const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x424f0ee796779b85ULL;
  static const uint64_t static_value2 = 0xfeeb4d976948cfa5ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/Log_GPSGLONASSSignalUsedMask";
  }

  static const char* value(const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Solution status - page 503\n"
"\n"
"bool Unused = 0\n"
"bool Used = 1\n"
"bool gps_L1\n"
"bool gps_L2\n"
"bool gps_L5\n"
"bool reserved_bit_3\n"
"bool glonass_L1\n"
"bool glonass_L2\n"
"bool glonass_L3\n"
"bool reserved_bit_7\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_L1);
      stream.next(m.gps_L2);
      stream.next(m.gps_L5);
      stream.next(m.reserved_bit_3);
      stream.next(m.glonass_L1);
      stream.next(m.glonass_L2);
      stream.next(m.glonass_L3);
      stream.next(m.reserved_bit_7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Log_GPSGLONASSSignalUsedMask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::Log_GPSGLONASSSignalUsedMask_<ContainerAllocator>& v)
  {
    s << indent << "gps_L1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_L1);
    s << indent << "gps_L2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_L2);
    s << indent << "gps_L5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_L5);
    s << indent << "reserved_bit_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserved_bit_3);
    s << indent << "glonass_L1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.glonass_L1);
    s << indent << "glonass_L2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.glonass_L2);
    s << indent << "glonass_L3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.glonass_L3);
    s << indent << "reserved_bit_7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserved_bit_7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_GPSGLONASSSIGNALUSEDMASK_H
