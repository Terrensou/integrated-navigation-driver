// Generated by gencpp from file integrated_navigation_reader/SPANLog_INSStatus.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_INSSTATUS_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_INSSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct SPANLog_INSStatus_
{
  typedef SPANLog_INSStatus_<ContainerAllocator> Type;

  SPANLog_INSStatus_()
    : status(0)  {
    }
  SPANLog_INSStatus_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INS_INACTIVE)
  #undef INS_INACTIVE
#endif
#if defined(_WIN32) && defined(INS_ALIGNING)
  #undef INS_ALIGNING
#endif
#if defined(_WIN32) && defined(INS_HIGH_VARIANCE)
  #undef INS_HIGH_VARIANCE
#endif
#if defined(_WIN32) && defined(INS_SOLUTION_GOOD)
  #undef INS_SOLUTION_GOOD
#endif
#if defined(_WIN32) && defined(INS_SOLUTION_FREE)
  #undef INS_SOLUTION_FREE
#endif
#if defined(_WIN32) && defined(INS_ALIGNMENT_COMPLETE)
  #undef INS_ALIGNMENT_COMPLETE
#endif
#if defined(_WIN32) && defined(DETERMINING_ORIENTATION)
  #undef DETERMINING_ORIENTATION
#endif
#if defined(_WIN32) && defined(WAITING_INITIALPOS)
  #undef WAITING_INITIALPOS
#endif
#if defined(_WIN32) && defined(WAITING_AZIMUTH)
  #undef WAITING_AZIMUTH
#endif
#if defined(_WIN32) && defined(INITIALIZING_BIASES)
  #undef INITIALIZING_BIASES
#endif
#if defined(_WIN32) && defined(MOTION_DETECT)
  #undef MOTION_DETECT
#endif
#if defined(_WIN32) && defined(WAITING_ALIGNMENTORIENTATION)
  #undef WAITING_ALIGNMENTORIENTATION
#endif

  enum {
    INS_INACTIVE = 0u,
    INS_ALIGNING = 1u,
    INS_HIGH_VARIANCE = 2u,
    INS_SOLUTION_GOOD = 3u,
    INS_SOLUTION_FREE = 6u,
    INS_ALIGNMENT_COMPLETE = 7u,
    DETERMINING_ORIENTATION = 8u,
    WAITING_INITIALPOS = 9u,
    WAITING_AZIMUTH = 10u,
    INITIALIZING_BIASES = 11u,
    MOTION_DETECT = 12u,
    WAITING_ALIGNMENTORIENTATION = 14u,
  };


  typedef boost::shared_ptr< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SPANLog_INSStatus_

typedef ::integrated_navigation_reader::SPANLog_INSStatus_<std::allocator<void> > SPANLog_INSStatus;

typedef boost::shared_ptr< ::integrated_navigation_reader::SPANLog_INSStatus > SPANLog_INSStatusPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::SPANLog_INSStatus const> SPANLog_INSStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "577717ab601f6a0499cd0f5499d95009";
  }

  static const char* value(const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x577717ab601f6a04ULL;
  static const uint64_t static_value2 = 0x99cd0f5499d95009ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/SPANLog_INSStatus";
  }

  static const char* value(const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# INS status - page 1055\n"
"\n"
"uint8 INS_INACTIVE = 0\n"
"uint8 INS_ALIGNING = 1\n"
"uint8 INS_HIGH_VARIANCE = 2\n"
"uint8 INS_SOLUTION_GOOD = 3\n"
"uint8 INS_SOLUTION_FREE = 6\n"
"uint8 INS_ALIGNMENT_COMPLETE = 7\n"
"uint8 DETERMINING_ORIENTATION = 8\n"
"uint8 WAITING_INITIALPOS = 9\n"
"uint8 WAITING_AZIMUTH = 10\n"
"uint8 INITIALIZING_BIASES = 11\n"
"uint8 MOTION_DETECT = 12\n"
"uint8 WAITING_ALIGNMENTORIENTATION = 14\n"
"uint8 status\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SPANLog_INSStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::SPANLog_INSStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_SPANLOG_INSSTATUS_H
