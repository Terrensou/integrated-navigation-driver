// Generated by gencpp from file integrated_navigation_reader/BinaryHeader.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_BINARYHEADER_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_BINARYHEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <integrated_navigation_reader/Log_ReceiverStatus.h>

namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct BinaryHeader_
{
  typedef BinaryHeader_<ContainerAllocator> Type;

  BinaryHeader_()
    : message_type()
    , port_address(0)
    , message_length(0)
    , sequence(0)
    , idle_time(0.0)
    , time_status(0)
    , week(0)
    , milliseconds(0)
    , receiver_status()
    , reserved()
    , receiver_sw_version(0)  {
      message_type.assign(0);
  }
  BinaryHeader_(const ContainerAllocator& _alloc)
    : message_type()
    , port_address(0)
    , message_length(0)
    , sequence(0)
    , idle_time(0.0)
    , time_status(0)
    , week(0)
    , milliseconds(0)
    , receiver_status(_alloc)
    , reserved(_alloc)
    , receiver_sw_version(0)  {
  (void)_alloc;
      message_type.assign(0);
  }



   typedef boost::array<uint8_t, 2>  _message_type_type;
  _message_type_type message_type;

   typedef uint16_t _port_address_type;
  _port_address_type port_address;

   typedef uint16_t _message_length_type;
  _message_length_type message_length;

   typedef int32_t _sequence_type;
  _sequence_type sequence;

   typedef double _idle_time_type;
  _idle_time_type idle_time;

   typedef uint8_t _time_status_type;
  _time_status_type time_status;

   typedef uint16_t _week_type;
  _week_type week;

   typedef uint64_t _milliseconds_type;
  _milliseconds_type milliseconds;

   typedef  ::integrated_navigation_reader::Log_ReceiverStatus_<ContainerAllocator>  _receiver_status_type;
  _receiver_status_type receiver_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _reserved_type;
  _reserved_type reserved;

   typedef uint32_t _receiver_sw_version_type;
  _receiver_sw_version_type receiver_sw_version;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Binary_Format)
  #undef Binary_Format
#endif
#if defined(_WIN32) && defined(ASCII_Format)
  #undef ASCII_Format
#endif
#if defined(_WIN32) && defined(Abbreviated_ASCII_NMEA_Format)
  #undef Abbreviated_ASCII_NMEA_Format
#endif
#if defined(_WIN32) && defined(Reserved)
  #undef Reserved
#endif
#if defined(_WIN32) && defined(Original_Message)
  #undef Original_Message
#endif
#if defined(_WIN32) && defined(Response_Message)
  #undef Response_Message
#endif
#if defined(_WIN32) && defined(NO_PORTS)
  #undef NO_PORTS
#endif
#if defined(_WIN32) && defined(COM1)
  #undef COM1
#endif
#if defined(_WIN32) && defined(COM2)
  #undef COM2
#endif
#if defined(_WIN32) && defined(COM3)
  #undef COM3
#endif
#if defined(_WIN32) && defined(SPECIAL)
  #undef SPECIAL
#endif
#if defined(_WIN32) && defined(THISPORT)
  #undef THISPORT
#endif
#if defined(_WIN32) && defined(FILE)
  #undef FILE
#endif
#if defined(_WIN32) && defined(USB1)
  #undef USB1
#endif
#if defined(_WIN32) && defined(USB2)
  #undef USB2
#endif
#if defined(_WIN32) && defined(USB3)
  #undef USB3
#endif
#if defined(_WIN32) && defined(AUX)
  #undef AUX
#endif
#if defined(_WIN32) && defined(COM4)
  #undef COM4
#endif
#if defined(_WIN32) && defined(ETH1)
  #undef ETH1
#endif
#if defined(_WIN32) && defined(IMU)
  #undef IMU
#endif
#if defined(_WIN32) && defined(ICOM1)
  #undef ICOM1
#endif
#if defined(_WIN32) && defined(ICOM2)
  #undef ICOM2
#endif
#if defined(_WIN32) && defined(ICOM3)
  #undef ICOM3
#endif
#if defined(_WIN32) && defined(NCOM1)
  #undef NCOM1
#endif
#if defined(_WIN32) && defined(NCOM2)
  #undef NCOM2
#endif
#if defined(_WIN32) && defined(NCOM3)
  #undef NCOM3
#endif
#if defined(_WIN32) && defined(ICOM4)
  #undef ICOM4
#endif
#if defined(_WIN32) && defined(WCOM1)
  #undef WCOM1
#endif
#if defined(_WIN32) && defined(COM5)
  #undef COM5
#endif
#if defined(_WIN32) && defined(COM6)
  #undef COM6
#endif
#if defined(_WIN32) && defined(BT1)
  #undef BT1
#endif
#if defined(_WIN32) && defined(COM7)
  #undef COM7
#endif
#if defined(_WIN32) && defined(COM8)
  #undef COM8
#endif
#if defined(_WIN32) && defined(COM9)
  #undef COM9
#endif
#if defined(_WIN32) && defined(COM10)
  #undef COM10
#endif
#if defined(_WIN32) && defined(CCOM1)
  #undef CCOM1
#endif
#if defined(_WIN32) && defined(CCOM2)
  #undef CCOM2
#endif
#if defined(_WIN32) && defined(CCOM3)
  #undef CCOM3
#endif
#if defined(_WIN32) && defined(CCOM4)
  #undef CCOM4
#endif
#if defined(_WIN32) && defined(CCOM5)
  #undef CCOM5
#endif
#if defined(_WIN32) && defined(CCOM6)
  #undef CCOM6
#endif
#if defined(_WIN32) && defined(ICOM5)
  #undef ICOM5
#endif
#if defined(_WIN32) && defined(ICOM6)
  #undef ICOM6
#endif
#if defined(_WIN32) && defined(ICOM7)
  #undef ICOM7
#endif
#if defined(_WIN32) && defined(SCOM1)
  #undef SCOM1
#endif
#if defined(_WIN32) && defined(SCOM2)
  #undef SCOM2
#endif
#if defined(_WIN32) && defined(SCOM3)
  #undef SCOM3
#endif
#if defined(_WIN32) && defined(SCOM4)
  #undef SCOM4
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(APPROXIMATE)
  #undef APPROXIMATE
#endif
#if defined(_WIN32) && defined(COARSEADJUSTING)
  #undef COARSEADJUSTING
#endif
#if defined(_WIN32) && defined(COARSE)
  #undef COARSE
#endif
#if defined(_WIN32) && defined(COARSESTEERING)
  #undef COARSESTEERING
#endif
#if defined(_WIN32) && defined(FREEWHEELING)
  #undef FREEWHEELING
#endif
#if defined(_WIN32) && defined(FINEADJUSTING)
  #undef FINEADJUSTING
#endif
#if defined(_WIN32) && defined(FINE)
  #undef FINE
#endif
#if defined(_WIN32) && defined(FINEBACKUPSTEERING)
  #undef FINEBACKUPSTEERING
#endif
#if defined(_WIN32) && defined(FINESTEERING)
  #undef FINESTEERING
#endif
#if defined(_WIN32) && defined(SATTIME)
  #undef SATTIME
#endif

  enum {
    Binary_Format = 0u,
    ASCII_Format = 1u,
    Abbreviated_ASCII_NMEA_Format = 10u,
    Reserved = 11u,
    Original_Message = 0u,
    Response_Message = 1u,
    NO_PORTS = 0u,
    COM1 = 32u,
    COM2 = 64u,
    COM3 = 96u,
    SPECIAL = 160u,
    THISPORT = 192u,
    FILE = 224u,
    USB1 = 1440u,
    USB2 = 1696u,
    USB3 = 1952u,
    AUX = 2208u,
    COM4 = 2976u,
    ETH1 = 3232u,
    IMU = 3488u,
    ICOM1 = 4000u,
    ICOM2 = 4256u,
    ICOM3 = 4512u,
    NCOM1 = 4768u,
    NCOM2 = 5024u,
    NCOM3 = 5280u,
    ICOM4 = 5536u,
    WCOM1 = 5792u,
    COM5 = 6048u,
    COM6 = 6304u,
    BT1 = 6560u,
    COM7 = 6816u,
    COM8 = 7072u,
    COM9 = 7328u,
    COM10 = 7584u,
    CCOM1 = 7840u,
    CCOM2 = 8096u,
    CCOM3 = 8352u,
    CCOM4 = 8608u,
    CCOM5 = 8864u,
    CCOM6 = 9120u,
    ICOM5 = 9888u,
    ICOM6 = 10144u,
    ICOM7 = 10400u,
    SCOM1 = 10656u,
    SCOM2 = 10912u,
    SCOM3 = 11168u,
    SCOM4 = 11424u,
    UNKNOWN = 20u,
    APPROXIMATE = 60u,
    COARSEADJUSTING = 80u,
    COARSE = 100u,
    COARSESTEERING = 120u,
    FREEWHEELING = 130u,
    FINEADJUSTING = 140u,
    FINE = 160u,
    FINEBACKUPSTEERING = 170u,
    FINESTEERING = 180u,
    SATTIME = 200u,
  };


  typedef boost::shared_ptr< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> const> ConstPtr;

}; // struct BinaryHeader_

typedef ::integrated_navigation_reader::BinaryHeader_<std::allocator<void> > BinaryHeader;

typedef boost::shared_ptr< ::integrated_navigation_reader::BinaryHeader > BinaryHeaderPtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::BinaryHeader const> BinaryHeaderConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator2> & rhs)
{
  return lhs.message_type == rhs.message_type &&
    lhs.port_address == rhs.port_address &&
    lhs.message_length == rhs.message_length &&
    lhs.sequence == rhs.sequence &&
    lhs.idle_time == rhs.idle_time &&
    lhs.time_status == rhs.time_status &&
    lhs.week == rhs.week &&
    lhs.milliseconds == rhs.milliseconds &&
    lhs.receiver_status == rhs.receiver_status &&
    lhs.reserved == rhs.reserved &&
    lhs.receiver_sw_version == rhs.receiver_sw_version;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b07890d2f5954fd7295f6c66f6bf80a";
  }

  static const char* value(const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b07890d2f5954fdULL;
  static const uint64_t static_value2 = 0x7295f6c66f6bf80aULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/BinaryHeader";
  }

  static const char* value(const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#INSPVAX header\n"
"uint8 Binary_Format = 0\n"
"uint8 ASCII_Format = 1\n"
"uint8 Abbreviated_ASCII_NMEA_Format = 10\n"
"uint8 Reserved = 11\n"
"uint8 Original_Message = 0\n"
"uint8 Response_Message = 1\n"
"uint8[2] message_type\n"
"\n"
"uint16 NO_PORTS = 0\n"
"uint16 COM1 = 32\n"
"uint16 COM2 = 64\n"
"uint16 COM3 = 96\n"
"uint16 SPECIAL = 160\n"
"uint16 THISPORT = 192\n"
"uint16 FILE = 224\n"
"uint16 USB1 = 1440\n"
"uint16 USB2 = 1696\n"
"uint16 USB3 = 1952\n"
"uint16 AUX = 2208\n"
"uint16 COM4 = 2976\n"
"uint16 ETH1 = 3232\n"
"uint16 IMU = 3488\n"
"uint16 ICOM1 = 4000\n"
"uint16 ICOM2 = 4256\n"
"uint16 ICOM3 = 4512\n"
"uint16 NCOM1 = 4768\n"
"uint16 NCOM2 = 5024\n"
"uint16 NCOM3 = 5280\n"
"uint16 ICOM4 = 5536\n"
"uint16 WCOM1 = 5792\n"
"uint16 COM5 = 6048\n"
"uint16 COM6 = 6304\n"
"uint16 BT1 = 6560\n"
"uint16 COM7 = 6816\n"
"uint16 COM8 = 7072\n"
"uint16 COM9 = 7328\n"
"uint16 COM10 = 7584\n"
"uint16 CCOM1 = 7840\n"
"uint16 CCOM2 = 8096\n"
"uint16 CCOM3 = 8352\n"
"uint16 CCOM4 = 8608\n"
"uint16 CCOM5 = 8864\n"
"uint16 CCOM6 = 9120\n"
"uint16 ICOM5 = 9888\n"
"uint16 ICOM6 = 10144\n"
"uint16 ICOM7 = 10400\n"
"uint16 SCOM1 = 10656\n"
"uint16 SCOM2 = 10912\n"
"uint16 SCOM3 = 11168\n"
"uint16 SCOM4 = 11424\n"
"uint16 port_address\n"
"\n"
"uint16 message_length\n"
"int32 sequence\n"
"\n"
"float64 idle_time\n"
"\n"
"uint8 UNKNOWN = 20\n"
"uint8 APPROXIMATE = 60\n"
"uint8 COARSEADJUSTING = 80\n"
"uint8 COARSE = 100\n"
"uint8 COARSESTEERING = 120\n"
"uint8 FREEWHEELING = 130\n"
"uint8 FINEADJUSTING = 140\n"
"uint8 FINE = 160\n"
"uint8 FINEBACKUPSTEERING = 170\n"
"uint8 FINESTEERING = 180\n"
"uint8 SATTIME = 200\n"
"uint8 time_status\n"
"\n"
"uint16 week\n"
"uint64 milliseconds\n"
"\n"
"Log_ReceiverStatus receiver_status\n"
"string reserved\n"
"uint32 receiver_sw_version\n"
"================================================================================\n"
"MSG: integrated_navigation_reader/Log_ReceiverStatus\n"
"# Receiver status - page 858\n"
"\n"
"bool OK = 0\n"
"bool Valid = 0\n"
"bool No_error = 0\n"
"bool No_overrun = 0\n"
"\n"
"bool Warning = 1\n"
"bool Error = 1\n"
"bool Failure = 1\n"
"bool Overrun = 1\n"
"bool Invalid = 1\n"
"\n"
"# N0\n"
"bool error_flag\n"
"\n"
"bool Within_specifications = 0\n"
"bool temperature_status\n"
"bool voltage_supply_status\n"
"\n"
"bool Powered = 0\n"
"bool Not_powered = 1\n"
"bool primary_antenna_power_status\n"
"\n"
"# N1\n"
"bool LNA_failure\n"
"\n"
"bool Open_and_Antenna_disconnected = 1\n"
"bool primary_antenna_open_circuit_flag\n"
"\n"
"bool Short_circuit_detected = 1\n"
"bool primary_antenna_short_circuit_flag\n"
"\n"
"bool No_overload = 0\n"
"bool Overload = 1\n"
"bool CPU_overload_flag\n"
"\n"
"# N2\n"
"bool COM_port_transmit_buffer_overrun\n"
"\n"
"bool Not_detected = 0\n"
"bool Detected = 1\n"
"bool spoofing_detection_status\n"
"\n"
"bool reserved\n"
"bool link_overrun_flag\n"
"\n"
"# N3\n"
"bool input_overrun_flag\n"
"bool aux_transmit_overrun_flag\n"
"\n"
"bool Out_of_range = 1\n"
"bool antenna_gain_state\n"
"\n"
"bool Jammer_Detected = 1\n"
"bool jammer_detected\n"
"\n"
"# N4\n"
"bool No_INS_reset = 0\n"
"bool INS_reset = 1\n"
"bool INS_reset_flag\n"
"\n"
"bool No_IMU_communication = 1\n"
"bool IMU_communication_failure\n"
"\n"
"bool GPS_almanac_flag_UTC_known\n"
"bool position_solution_flag\n"
"\n"
"# N5\n"
"bool Not_fixed = 0\n"
"bool Fixed = 1\n"
"bool position_fixed_flag\n"
"\n"
"bool Enabled_clock_steering = 0\n"
"bool Disabled_clock_steering = 1\n"
"bool clock_steering_status\n"
"\n"
"bool clock_model_flag\n"
"\n"
"bool UnLocked = 0\n"
"bool Locked = 1\n"
"bool external_oscillator_locked_flag\n"
"\n"
"# N6\n"
"bool software_resource\n"
"\n"
"bool OEM6_or_earlier_format = 0\n"
"bool OEM7_format = 1\n"
"bool status_error_version_bit\n"
"\n"
"bool version_bit_1\n"
"\n"
"bool Normal_tracking = 0\n"
"bool HDR_tracking = 1\n"
"bool tracking_mode\n"
"\n"
"# N7\n"
"bool Disables_digital_filtering = 0\n"
"bool Enables_digital_filtering = 1\n"
"bool digital_filtering_enabled\n"
"\n"
"bool No_event = 0\n"
"bool Event = 1\n"
"bool auxiliary_3_status_event_flag\n"
"bool auxiliary_2_status_event_flag\n"
"bool auxiliary_1_status_event_flag\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_type);
      stream.next(m.port_address);
      stream.next(m.message_length);
      stream.next(m.sequence);
      stream.next(m.idle_time);
      stream.next(m.time_status);
      stream.next(m.week);
      stream.next(m.milliseconds);
      stream.next(m.receiver_status);
      stream.next(m.reserved);
      stream.next(m.receiver_sw_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BinaryHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::BinaryHeader_<ContainerAllocator>& v)
  {
    s << indent << "message_type[]" << std::endl;
    for (size_t i = 0; i < v.message_type.size(); ++i)
    {
      s << indent << "  message_type[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.message_type[i]);
    }
    s << indent << "port_address: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.port_address);
    s << indent << "message_length: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.message_length);
    s << indent << "sequence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sequence);
    s << indent << "idle_time: ";
    Printer<double>::stream(s, indent + "  ", v.idle_time);
    s << indent << "time_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time_status);
    s << indent << "week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.week);
    s << indent << "milliseconds: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.milliseconds);
    s << indent << "receiver_status: ";
    s << std::endl;
    Printer< ::integrated_navigation_reader::Log_ReceiverStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.receiver_status);
    s << indent << "reserved: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.reserved);
    s << indent << "receiver_sw_version: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.receiver_sw_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_BINARYHEADER_H
