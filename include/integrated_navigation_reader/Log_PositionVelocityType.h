// Generated by gencpp from file integrated_navigation_reader/Log_PositionVelocityType.msg
// DO NOT EDIT!


#ifndef INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_POSITIONVELOCITYTYPE_H
#define INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_POSITIONVELOCITYTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace integrated_navigation_reader
{
template <class ContainerAllocator>
struct Log_PositionVelocityType_
{
  typedef Log_PositionVelocityType_<ContainerAllocator> Type;

  Log_PositionVelocityType_()
    : type(0)  {
    }
  Log_PositionVelocityType_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(FIXEDPOS)
  #undef FIXEDPOS
#endif
#if defined(_WIN32) && defined(FIXEDHEIGHT)
  #undef FIXEDHEIGHT
#endif
#if defined(_WIN32) && defined(DOPPLER_VELOCITY)
  #undef DOPPLER_VELOCITY
#endif
#if defined(_WIN32) && defined(SINGLE)
  #undef SINGLE
#endif
#if defined(_WIN32) && defined(PSRDIFF)
  #undef PSRDIFF
#endif
#if defined(_WIN32) && defined(WAAS)
  #undef WAAS
#endif
#if defined(_WIN32) && defined(PROPAGATED)
  #undef PROPAGATED
#endif
#if defined(_WIN32) && defined(L1_FLOAT)
  #undef L1_FLOAT
#endif
#if defined(_WIN32) && defined(NARROW_FLOAT)
  #undef NARROW_FLOAT
#endif
#if defined(_WIN32) && defined(L1_INT)
  #undef L1_INT
#endif
#if defined(_WIN32) && defined(WIDE_INT)
  #undef WIDE_INT
#endif
#if defined(_WIN32) && defined(NARROW_INT)
  #undef NARROW_INT
#endif
#if defined(_WIN32) && defined(RTK_DIRECT_INS)
  #undef RTK_DIRECT_INS
#endif
#if defined(_WIN32) && defined(INS_SBAS)
  #undef INS_SBAS
#endif
#if defined(_WIN32) && defined(INS_PSRSP)
  #undef INS_PSRSP
#endif
#if defined(_WIN32) && defined(INS_PSRDIFF)
  #undef INS_PSRDIFF
#endif
#if defined(_WIN32) && defined(INS_RTKFLOAT)
  #undef INS_RTKFLOAT
#endif
#if defined(_WIN32) && defined(INS_RTKFIXED)
  #undef INS_RTKFIXED
#endif
#if defined(_WIN32) && defined(PPP_CONVERGING)
  #undef PPP_CONVERGING
#endif
#if defined(_WIN32) && defined(PPP)
  #undef PPP
#endif
#if defined(_WIN32) && defined(OPERATIONAL)
  #undef OPERATIONAL
#endif
#if defined(_WIN32) && defined(WARNING)
  #undef WARNING
#endif
#if defined(_WIN32) && defined(OUT_OF_BOUNDS)
  #undef OUT_OF_BOUNDS
#endif
#if defined(_WIN32) && defined(INS_PPP_CONVERGING)
  #undef INS_PPP_CONVERGING
#endif
#if defined(_WIN32) && defined(INS_PPP)
  #undef INS_PPP
#endif
#if defined(_WIN32) && defined(PPP_BASIC_CONVERGING)
  #undef PPP_BASIC_CONVERGING
#endif
#if defined(_WIN32) && defined(PPP_BASIC)
  #undef PPP_BASIC
#endif
#if defined(_WIN32) && defined(INS_PPP_BASIC_CONVERGING)
  #undef INS_PPP_BASIC_CONVERGING
#endif
#if defined(_WIN32) && defined(INS_PPP_BASIC)
  #undef INS_PPP_BASIC
#endif

  enum {
    NONE = 0u,
    FIXEDPOS = 1u,
    FIXEDHEIGHT = 2u,
    DOPPLER_VELOCITY = 8u,
    SINGLE = 16u,
    PSRDIFF = 17u,
    WAAS = 18u,
    PROPAGATED = 19u,
    L1_FLOAT = 32u,
    NARROW_FLOAT = 34u,
    L1_INT = 48u,
    WIDE_INT = 49u,
    NARROW_INT = 50u,
    RTK_DIRECT_INS = 51u,
    INS_SBAS = 52u,
    INS_PSRSP = 53u,
    INS_PSRDIFF = 54u,
    INS_RTKFLOAT = 55u,
    INS_RTKFIXED = 56u,
    PPP_CONVERGING = 68u,
    PPP = 69u,
    OPERATIONAL = 70u,
    WARNING = 71u,
    OUT_OF_BOUNDS = 72u,
    INS_PPP_CONVERGING = 73u,
    INS_PPP = 74u,
    PPP_BASIC_CONVERGING = 77u,
    PPP_BASIC = 78u,
    INS_PPP_BASIC_CONVERGING = 79u,
    INS_PPP_BASIC = 80u,
  };


  typedef boost::shared_ptr< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> const> ConstPtr;

}; // struct Log_PositionVelocityType_

typedef ::integrated_navigation_reader::Log_PositionVelocityType_<std::allocator<void> > Log_PositionVelocityType;

typedef boost::shared_ptr< ::integrated_navigation_reader::Log_PositionVelocityType > Log_PositionVelocityTypePtr;
typedef boost::shared_ptr< ::integrated_navigation_reader::Log_PositionVelocityType const> Log_PositionVelocityTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator1> & lhs, const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace integrated_navigation_reader

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "390eb6b13e85c57acdce238886b4e762";
  }

  static const char* value(const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x390eb6b13e85c57aULL;
  static const uint64_t static_value2 = 0xcdce238886b4e762ULL;
};

template<class ContainerAllocator>
struct DataType< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "integrated_navigation_reader/Log_PositionVelocityType";
  }

  static const char* value(const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Position type - page 501\n"
"\n"
"uint8 NONE = 0\n"
"uint8 FIXEDPOS = 1\n"
"uint8 FIXEDHEIGHT = 2\n"
"uint8 DOPPLER_VELOCITY = 8\n"
"uint8 SINGLE = 16\n"
"uint8 PSRDIFF = 17\n"
"uint8 WAAS = 18\n"
"uint8 PROPAGATED = 19\n"
"uint8 L1_FLOAT = 32\n"
"uint8 NARROW_FLOAT = 34\n"
"uint8 L1_INT = 48\n"
"uint8 WIDE_INT = 49\n"
"uint8 NARROW_INT = 50\n"
"uint8 RTK_DIRECT_INS = 51\n"
"uint8 INS_SBAS = 52\n"
"uint8 INS_PSRSP = 53\n"
"uint8 INS_PSRDIFF = 54\n"
"uint8 INS_RTKFLOAT = 55\n"
"uint8 INS_RTKFIXED = 56\n"
"uint8 PPP_CONVERGING = 68\n"
"uint8 PPP = 69\n"
"uint8 OPERATIONAL = 70\n"
"uint8 WARNING = 71\n"
"uint8 OUT_OF_BOUNDS = 72\n"
"uint8 INS_PPP_CONVERGING = 73\n"
"uint8 INS_PPP = 74\n"
"uint8 PPP_BASIC_CONVERGING = 77\n"
"uint8 PPP_BASIC = 78\n"
"uint8 INS_PPP_BASIC_CONVERGING = 79\n"
"uint8 INS_PPP_BASIC = 80\n"
"uint8 type\n"
;
  }

  static const char* value(const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Log_PositionVelocityType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::integrated_navigation_reader::Log_PositionVelocityType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTEGRATED_NAVIGATION_READER_MESSAGE_LOG_POSITIONVELOCITYTYPE_H
